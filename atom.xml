<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kur0mi&#39;s blog</title>
  
  <subtitle>faith and brave</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.nightmare.xin/"/>
  <updated>2018-01-24T07:58:43.773Z</updated>
  <id>https://blog.nightmare.xin/</id>
  
  <author>
    <name>kur0mi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有趣的 PA0</title>
    <link href="https://blog.nightmare.xin/pa1.html"/>
    <id>https://blog.nightmare.xin/pa1.html</id>
    <published>2018-01-23T09:58:18.000Z</published>
    <updated>2018-01-24T07:58:43.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PA1-洞察世界的视点-简易调试器"><a href="#PA1-洞察世界的视点-简易调试器" class="headerlink" title="PA1 - 洞察世界的视点: 简易调试器"></a>PA1 - 洞察世界的视点: 简易调试器</h1><h1 id="在开始愉快的PA之旅之前"><a href="#在开始愉快的PA之旅之前" class="headerlink" title="在开始愉快的PA之旅之前"></a>在开始愉快的PA之旅之前</h1><p>直接运行在硬件上的是操作系统，操作系统向上层提供接口，前人将这些接口进一步封装成为库，而我们则使用这些库来编写程序，它们最终还是运行在硬件上。</p><p>PA 要实现一个模拟器，即NEMU (n emulator)，用软件模拟硬件（数组模拟内存，结构体模拟寄存器），模拟器运行在操作系统上，对上层开放接口，这些接口就是它模拟的各种硬件，接下来，应该是在这层’硬件’的上边，进一步开放接口使用户程序能够调用，就像操作系统一样。</p><p>其中 PA1 的内容是第一步，模拟各种硬件。（简易调试器应该属于开发环境吧。。）</p><h1 id="RTFSC"><a href="#RTFSC" class="headerlink" title="RTFSC"></a>RTFSC</h1><p>RTFSC（即 read the fxxk source code），这是 NEMU 的结构，有计时器，键盘还有各种IO。</p><p>CPU，内存，设备构成模拟硬件，监视器则独立于系统外。</p><p><img src="http://store.nightmare.xin/bd79f5e364df29846a63f87f72111865.png" alt=""></p><p>不过我们在 PA1 中不用了解这么多，基本只需要关注监视器（monitor）相关内容就好了，为什么说基本呢，因为编写监视器要调用其他部分的接口啊。。（如图 我的 merge）</p><p><img src="http://store.nightmare.xin/6804c0b9bfd9fae2f1b5aee2fc5d5e3f.png" alt=""></p><p>具体各部分内容自己探索好了，RTFSC。</p><p>在 main 函数中就两个函数，简单明了。init_monitor 进行了一些准备工作（测试各部分是否正常和一些初始化），ui_mainloop 是一个循环，重复 取指，译码，执行，更新eip 的过程，就像真实的计算机一样。</p><p>计算机加电之后将控制权交给 BIOS， BIOS 进行一些检查和简单的初始化，然后会唤醒操作系统，至此 BIOS 的使命就完成了。NEMU 将一段程序加载到 0x100000 处，用于模拟 BIOS启动。</p><h1 id="简易调试器"><a href="#简易调试器" class="headerlink" title="简易调试器"></a>简易调试器</h1><ul><li><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2>NEMU 有四个32位的通用寄存器，即eax（累加器），ebx（基数寄存器），ecx（计数器），edx（用于除法）。这些通用寄存器都可以拆分成16位的寄存器使用，即ax，bx，cx，dx，方便读写双字和字，同时兼容16位的处理器。进一步可以拆分成… 还是看图吧</li></ul><p><img src="http://store.nightmare.xin/6ebc49e16f7398b57a38d1d15a13055d.png" alt=""></p><p>esi（源地址），edi（目标地址），esp（指向栈顶），从栈顶访问元素很不方便因此引入 ebp（基地址）。</p><p>eip 是指令寄存器，每次执行完指令都要刷新（加上该指令的长度），如果是相对跳转指令还要加上偏移量，绝对跳转则直接转向目标地址。</p><p>然后实现寄存器的结构体就好了，记得匿名 union</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-typedef struct &#123;</span></div><div class="line"><span class="deletion">-  struct &#123;</span></div><div class="line"><span class="addition">+typedef union &#123;</span></div><div class="line"><span class="addition">+  union &#123;</span></div><div class="line">     uint32_t _32;</div><div class="line">     uint16_t _16;</div><div class="line">     uint8_t _8[2];</div><div class="line">@@ -26,9 +26,10 @@ typedef struct &#123;</div><div class="line">   /* In NEMU, rtlreg_t is exactly uint32_t. This makes RTL instructions</div><div class="line">    * in PA2 able to directly access these registers.</div><div class="line">    */</div><div class="line"><span class="deletion">-  rtlreg_t eax, ecx, edx, ebx, esp, ebp, esi, edi;</span></div><div class="line"><span class="deletion">-</span></div><div class="line"><span class="deletion">-  vaddr_t eip;</span></div><div class="line"><span class="addition">+  struct &#123;</span></div><div class="line"><span class="addition">+  rtlreg_t eax, ecx, edx, ebx, esp, ebp, esi, edi;</span></div><div class="line"><span class="addition">+  vaddr_t eip;</span></div><div class="line"><span class="addition">+  &#125;;</span></div><div class="line"></div><div class="line"> &#125; CPU_state;</div></pre></td></tr></table></figure><p>这里我觉得每次编译运行都要自动 commit 嫌烦就手抽把 Makefile 改了，改成手动提交。。 但是昨晚 PA1 感觉提交记录不太够，还是改回来吧。。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> $(BINARY): $(OBJS)</div><div class="line"><span class="deletion">-$(call git_commit, "compile")</span></div><div class="line"> @echo + LD $@</div><div class="line"> @$(LD) -O2 -o $@ $^ -lSDL2 -lreadline</div><div class="line"></div><div class="line"> run: $(BINARY)</div><div class="line"><span class="deletion">-$(call git_commit, "run")</span></div><div class="line"> $(NEMU_EXEC)</div><div class="line"></div><div class="line"><span class="addition">+commit: $(BINARY)</span></div><div class="line"><span class="addition">+$(call git_commit, "$(message)")</span></div><div class="line"><span class="addition">+</span></div><div class="line"> gdb: $(BINARY)</div><div class="line"><span class="deletion">-$(call git_commit, "gdb")</span></div><div class="line"> gdb -s $(BINARY) --args $(NEMU_EXEC)</div></pre></td></tr></table></figure><p>对了，测试代码的时候觉得海量的输出和那个 -Werror 烦人的话可以像我一样改一下</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-CFLAGS   += -O2 -MMD -Wall -Werror -ggdb $(INCLUDES)</span></div><div class="line"><span class="addition">+ifeq ($(debug), y)</span></div><div class="line"><span class="addition">+CFLAGS   = -O2 -MMD -Wall -ggdb -D MY_DEBUG $(INCLUDES)</span></div><div class="line"><span class="addition">+else ifeq ($(debug), n)</span></div><div class="line"><span class="addition">+CFLAGS   = -O2 -MMD -Wall -Werror $(INCLUDES)</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+CFLAGS   = -O2 -MMD -Wall -Werror -ggdb $(INCLUDES)</span></div><div class="line"><span class="addition">+endif</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+debug:</span></div><div class="line"><span class="addition">+@echo $(CFLAGS)</span></div></pre></td></tr></table></figure><p>单步执行直接调用接口就好了</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+static int cmd_si(char *args)&#123;</span></div><div class="line"><span class="addition">+  int n;</span></div><div class="line"><span class="addition">+  if (args == NULL)</span></div><div class="line"><span class="addition">+ n = 1;</span></div><div class="line"><span class="addition">+  else</span></div><div class="line"><span class="addition">+n = atoi(args);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  cpu_exec(n);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>打印寄存器直接 printf 输出</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">if (strcmp(args, "r") == 0)&#123;</div><div class="line"><span class="addition">+char eip[9], eax[9], ebx[9], ecx[9], edx[9], esp[9], ebp[9], esi[9], edi[9];</span></div><div class="line"><span class="addition">+sprintf(eip, "%08x", cpu.eip);</span></div><div class="line"><span class="addition">+sprintf(eax, "%08x", cpu.eax);</span></div><div class="line"><span class="addition">+sprintf(ebx, "%08x", cpu.ebx);</span></div><div class="line"><span class="addition">+sprintf(ecx, "%08x", cpu.ecx);</span></div><div class="line"><span class="addition">+sprintf(edx, "%08x", cpu.edx);</span></div><div class="line"><span class="addition">+sprintf(esp, "%08x", cpu.esp);</span></div><div class="line"><span class="addition">+sprintf(ebp, "%08x", cpu.ebp);</span></div><div class="line"><span class="addition">+sprintf(esi, "%08x", cpu.esi);</span></div><div class="line"><span class="addition">+sprintf(edi, "%08x", cpu.edi);</span></div><div class="line"><span class="addition">+printf("%%eip: 0x%s\n", eip);</span></div><div class="line"><span class="addition">+printf("%%eax: 0x%s\n", eax);</span></div><div class="line"><span class="addition">+printf("%%ebx: 0x%s\n", ebx);</span></div><div class="line"><span class="addition">+printf("%%ecx: 0x%s\n", ecx);</span></div><div class="line"><span class="addition">+printf("%%edx: 0x%s\n", edx);</span></div><div class="line"><span class="addition">+printf("%%esp: 0x%s\n", esp);</span></div><div class="line"><span class="addition">+printf("%%ebp: 0x%s\n", ebp);</span></div><div class="line"><span class="addition">+printf("%%esi: 0x%s\n", esi);</span></div><div class="line"><span class="addition">+printf("%%edi: 0x%s\n", edi);</span></div><div class="line"><span class="addition">+  &#125;</span></div></pre></td></tr></table></figure><p>扫描内存这里出了问题，我调用访问内存的接口，访问到的数据最多只能访问四个，应该是误用了指针，尝试无果，用了取巧的办法，绕过接口直接对pmem操作，就很虚… 忽然想起我实现了表达式求值可以把地址换成表达式了</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+static int cmd_x(char *args)&#123;</span></div><div class="line"><span class="addition">+  // parse args</span></div><div class="line"><span class="addition">+  Assert(args != NULL, "too few argument");</span></div><div class="line"><span class="addition">+  char *sLen = strtok(args, " ");</span></div><div class="line"><span class="addition">+  Assert(sLen != NULL, "too few argument");</span></div><div class="line"><span class="addition">+  char *sAddr = strtok(NULL, " ");</span></div><div class="line"><span class="addition">+  Assert(sAddr != NULL, "too few argument");</span></div><div class="line"><span class="addition">+  Assert(strtok(NULL, " ") == NULL, "too many argument");</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  // convert</span></div><div class="line"><span class="addition">+  int len = atoi(sLen);</span></div><div class="line"><span class="addition">+  vaddr_t nAddr;</span></div><div class="line"><span class="addition">+  sscanf(sAddr + 2, "%x", &amp;nAddr);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  // print</span></div><div class="line"><span class="addition">+  int i;</span></div><div class="line"><span class="addition">+  for (i = 0; i &lt; len; i+=4)&#123;</span></div><div class="line"><span class="addition">+if (len - i &lt; 4)&#123;</span></div><div class="line"><span class="addition">+printf("0x%07x: ", nAddr + i);</span></div><div class="line"><span class="addition">+int k;</span></div><div class="line"><span class="addition">+for (k = 0; k &lt; len - i; k++)&#123;</span></div><div class="line"><span class="addition">+printf("0x%02x ", pmem[nAddr+i+k]);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+printf("\n");</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+printf("0x%07x: 0x%02x 0x%02x 0x%02x 0x%02x\n", nAddr + i, pmem[nAddr+i], pmem[nAddr+i+1], pmem[nAddr+i+2], pmem[nAddr+i+3]);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+  &#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><ul><li><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2>首先是 token 的匹配，这里我想用正向预查（？！pattern），费尽力气没有找到C有这样的表达，然后注意到那句提示 pay attention，感觉好坑啊，真的勇士，脚踩过无数的坑…</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> static struct rule &#123;</div><div class="line">@@ -22,9 +32,25 @@ static struct rule &#123;</div><div class="line">    * Pay attention to the precedence level of different rules.</div><div class="line">    */</div><div class="line"></div><div class="line"><span class="deletion">-  &#123;" +", TK_NOTYPE&#125;,    // spaces</span></div><div class="line"><span class="deletion">-  &#123;"\\+", '+'&#125;,         // plus</span></div><div class="line"><span class="deletion">-  &#123;"==", TK_EQ&#125;         // equal</span></div><div class="line"><span class="addition">+  &#123;"^( +)", TK_NOTYPE&#125;,    // spaces</span></div><div class="line"><span class="addition">+  &#123;"^(==)", TK_EQ&#125;,        // equal</span></div><div class="line"><span class="addition">+  &#123;"^(!=)", TK_NEQ&#125;,// not equal</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  &#123;"^(\\+)", '+'&#125;,         // plus</span></div><div class="line"><span class="addition">+  &#123;"^(-)", '-'&#125;,         // sub or neg</span></div><div class="line"><span class="addition">+  &#123;"^(\\*)", '*'&#125;,         // multi or inner</span></div><div class="line"><span class="addition">+  &#123;"^(/)", '/'&#125;,         // div</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  &#123;"^(0x[0-9a-fA-F]+)", TK_HEXADECIMAL&#125;,// hexadecimal numbers</span></div><div class="line"><span class="addition">+  &#123;"^(0|[1-9][0-9]*)", TK_DECIMAL&#125;,// decimal numbers</span></div><div class="line"><span class="addition">+  &#123;"^(\\$e(ax|bx|cx|dx|sp|bp|si|di|ip))", TK_REGNAME&#125;, // reg name</span></div><div class="line"><span class="addition">+  &#123;"^(,)", TK_COMMA&#125;,// comma</span></div><div class="line"><span class="addition">+  &#123;"^(\\()", TK_OPEN_PAREN&#125;,// open paren</span></div><div class="line"><span class="addition">+  &#123;"^(\\))", TK_CLOSE_PAREN&#125;,// close paren</span></div><div class="line"><span class="addition">+  &#123;"^(&amp;&amp;)", TK_LOGIC_AND&#125;, // logic and</span></div><div class="line"><span class="addition">+  &#123;"^[|]&#123;2&#125;", TK_LOGIC_OR&#125;, //logic or</span></div><div class="line"><span class="addition">+  &#123;"^(!)", TK_LOGIC_NOT&#125;,// logic not</span></div><div class="line"><span class="addition">+  // C has not (?!pattern), em...</span></div><div class="line"> &#125;;</div></pre></td></tr></table></figure><p>这样匹配后把那个判断 position 去掉了，感觉应该会优化一些</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-      if (regexec(&amp;re[i], e + position, 1, &amp;pmatch, 0) == 0 &amp;&amp; pmatch.rm_so == 0) &#123;</span></div><div class="line"><span class="addition">+      if (regexec(&amp;re[i], e + position, 1, &amp;pmatch, 0) == 0) &#123;</span></div></pre></td></tr></table></figure><p>然后是将 匹配到的token信息 写入 tokens 数组，有一些token需要特殊处理（空格不用写入，数字和寄存器要写入更详细的信息）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">         /* TODO: Now a new token is recognized with rules[i]. Add codes</div><div class="line">          * to record the token in the array `tokens'. For certain types</div><div class="line">@@ -80,9 +110,45 @@ static bool make_token(char *e) &#123;</div><div class="line">          */</div><div class="line"></div><div class="line">         switch (rules[i].token_type) &#123;</div><div class="line"><span class="deletion">-          default: TODO();</span></div><div class="line"><span class="deletion">-        &#125;</span></div><div class="line"><span class="addition">+  case TK_DECIMAL:</span></div><div class="line"><span class="addition">+case TK_HEXADECIMAL:</span></div><div class="line"><span class="addition">+case TK_REGNAME:</span></div><div class="line"><span class="addition">+if (substr_len &gt; 31)</span></div><div class="line"><span class="addition">+panic("value too long");</span></div><div class="line"><span class="addition">+strncpy(tokens[nr_token].str, substr_start, substr_len);</span></div><div class="line"><span class="addition">+tokens[nr_token].str[substr_len] = '\0';</span></div><div class="line"><span class="addition">+tokens[nr_token].type = rules[i].token_type;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_NOTYPE:</span></div><div class="line"><span class="addition">+continue;</span></div><div class="line"><span class="addition">+  case '-':</span></div><div class="line"><span class="addition">+if (nr_token == 0 || check_negtive_prefixx(nr_token-1))&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = TK_NEGTIVE;</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("negtive");</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = rules[i].token_type;</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("sub");</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case '*':</span></div><div class="line"><span class="addition">+if (nr_token == 0 || check_inner_prefixx(nr_token-1))&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = TK_INNER;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = rules[i].token_type;;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+          default:</span></div><div class="line"><span class="addition">+ tokens[nr_token].type = rules[i].token_type;</span></div><div class="line"><span class="addition">+       &#125;</span></div></pre></td></tr></table></figure><p>检查是否是 ‘(‘ expression ‘)’ 的形式</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+// check open_paren &amp; close_paren</span></div><div class="line"><span class="addition">+bool check_parentheses(int p, int q)&#123;</span></div><div class="line"><span class="addition">+if (tokens[p].type == TK_OPEN_PAREN &amp;&amp; tokens[q].type == TK_CLOSE_PAREN)&#123;</span></div><div class="line"><span class="addition">+p++;</span></div><div class="line"><span class="addition">+while (p &lt; q)&#123;</span></div><div class="line"><span class="addition">+if (tokens[p].type == TK_CLOSE_PAREN)</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+p++;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+return true;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>检查 ‘*’ 是否匹配 指针解引用</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+bool check_inner_prefixx(int t)&#123;</span></div><div class="line"><span class="addition">+int type = tokens[t].type;</span></div><div class="line"><span class="addition">+if (type == '+' || type == '-' || type == '*' || type == TK_INNER || type == '/' || type == TK_NEGTIVE || type == TK_OPEN_PAREN || type == TK_COMMA || type == TK_EQ)</span></div><div class="line"><span class="addition">+return true;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>检查 ‘-‘ 是否匹配 负号</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+bool check_negtive_prefixx(int t)&#123;</span></div><div class="line"><span class="addition">+int type = tokens[t].type;</span></div><div class="line"><span class="addition">+if (type == '+' || type == '-' || type == '*' || type == TK_INNER || type == '/' || type == TK_NEGTIVE || type == TK_OPEN_PAREN || type == TK_COMMA || type == TK_EQ)</span></div><div class="line"><span class="addition">+ return true;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>将不可能的 dominant 排除掉</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+bool check_domi_operate(int t)&#123;</span></div><div class="line"><span class="addition">+int type = tokens[t].type;</span></div><div class="line"><span class="addition">+if (type == '+' || type == '-' || type == '*' || type == TK_INNER || type == '/' || type == TK_NEGTIVE || type == TK_COMMA || type == TK_EQ || type == TK_NEQ || type == TK_LOGIC_AND || type == TK_LOGIC_OR || type == TK_LOGIC_NOT)</span></div><div class="line"><span class="addition">+return true;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>获取 dominant 以及 表达式求值，匹配最低的优先级，也便于将来拓展</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+int get_dominant(int p, int q)&#123;</span></div><div class="line"><span class="addition">+int domi = -1;</span></div><div class="line"><span class="addition">+int min_level = 15;</span></div><div class="line"><span class="addition">+int level;</span></div><div class="line"><span class="addition">+int cur;</span></div><div class="line"><span class="addition">+for (cur = p; cur &lt;= q; cur++)&#123;</span></div><div class="line"><span class="addition">+// jump over bracks</span></div><div class="line"><span class="addition">+if (tokens[cur].type == TK_OPEN_PAREN)&#123;</span></div><div class="line"><span class="addition">+cur++;</span></div><div class="line"><span class="addition">+while (tokens[cur].type != TK_CLOSE_PAREN)</span></div><div class="line"><span class="addition">+cur++;</span></div><div class="line"><span class="addition">+cur++;</span></div><div class="line"><span class="addition">+if (cur &gt; q)</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+// jump non_diminant</span></div><div class="line"><span class="addition">+if (!check_domi_operate(cur))</span></div><div class="line"><span class="addition">+continue;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+switch (tokens[cur].type)&#123;</span></div><div class="line"><span class="addition">+case TK_NEGTIVE:</span></div><div class="line"><span class="addition">+case TK_INNER:</span></div><div class="line"><span class="addition">+case TK_LOGIC_NOT:</span></div><div class="line"><span class="addition">+level = 9;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case '*':</span></div><div class="line"><span class="addition">+case '/':</span></div><div class="line"><span class="addition">+level = 8;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case '+':</span></div><div class="line"><span class="addition">+case '-':</span></div><div class="line"><span class="addition">+level = 7;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_EQ:</span></div><div class="line"><span class="addition">+case TK_NEQ:</span></div><div class="line"><span class="addition">+level = 6;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_LOGIC_AND:</span></div><div class="line"><span class="addition">+level = 5;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_LOGIC_OR:</span></div><div class="line"><span class="addition">+level = 4;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_COMMA:</span></div><div class="line"><span class="addition">+level = 1;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+default:</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (level &lt;= min_level)&#123;</span></div><div class="line"><span class="addition">+min_level = level;</span></div><div class="line"><span class="addition">+domi = cur;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("hit level %d, %d - %d", min_level, p, q);</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+Assert(domi != -1, "cannot hit dominant");</span></div><div class="line"><span class="addition">+return domi;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+uint32_t eval(int p, int q)&#123;</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("eval %d - %d", p, q);</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+if (p &gt; q)&#123;</span></div><div class="line"><span class="addition">+panic("Bad expression");</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else if (p == q)&#123;</span></div><div class="line"><span class="addition">+uint32_t n = 0;</span></div><div class="line"><span class="addition">+if (tokens[p].type == TK_DECIMAL)</span></div><div class="line"><span class="addition">+sscanf(tokens[p].str, "%d", &amp;n);</span></div><div class="line"><span class="addition">+else if (tokens[p].type == TK_HEXADECIMAL)</span></div><div class="line"><span class="addition">+sscanf(tokens[p].str + 2, "%x", &amp;n);</span></div><div class="line"><span class="addition">+else if (tokens[p].type == TK_REGNAME)&#123;</span></div><div class="line"><span class="addition">+if (strcmp(tokens[p].str + 2, "ax") == 0)</span></div><div class="line"><span class="addition">+return cpu.eax;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "bx") == 0)</span></div><div class="line"><span class="addition">+return cpu.ebx;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "cx") == 0)</span></div><div class="line"><span class="addition">+return cpu.ecx;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "dx") == 0)</span></div><div class="line"><span class="addition">+return cpu.edx;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "sp") == 0)</span></div><div class="line"><span class="addition">+return cpu.esp;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "bp") == 0)</span></div><div class="line"><span class="addition">+return cpu.ebp;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "si") == 0)</span></div><div class="line"><span class="addition">+return cpu.esi;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "di") == 0)</span></div><div class="line"><span class="addition">+return cpu.edi;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "ip") == 0)</span></div><div class="line"><span class="addition">+return cpu.eip;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+panic("no such register");</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+return n;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else if (check_parentheses(p, q))&#123;</span></div><div class="line"><span class="addition">+return eval(p+1, q-1);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+int domi = get_dominant(p, q);</span></div><div class="line"><span class="addition">+if (tokens[domi].type == TK_NEGTIVE)</span></div><div class="line"><span class="addition">+return -1 * eval(domi+1, q);</span></div><div class="line"><span class="addition">+if (tokens[domi].type == TK_INNER)</span></div><div class="line"><span class="addition">+return pmem[eval(domi+1, q)];</span></div><div class="line"><span class="addition">+if (tokens[domi].type == TK_LOGIC_NOT)</span></div><div class="line"><span class="addition">+return !(eval(domi+1, q));</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+int val1 = eval(p, domi-1);</span></div><div class="line"><span class="addition">+int val2 = eval(domi+1, q);</span></div><div class="line"><span class="addition">+switch (tokens[domi].type)&#123;</span></div><div class="line"><span class="addition">+case '+':</span></div><div class="line"><span class="addition">+return val1 + val2;</span></div><div class="line"><span class="addition">+case '-':</span></div><div class="line"><span class="addition">+return val1 - val2;</span></div><div class="line"><span class="addition">+case '*':</span></div><div class="line"><span class="addition">+return val1 * val2;</span></div><div class="line"><span class="addition">+case '/':</span></div><div class="line"><span class="addition">+return val1 / val2;</span></div><div class="line"><span class="addition">+case TK_EQ:</span></div><div class="line"><span class="addition">+return val1 == val2;</span></div><div class="line"><span class="addition">+case TK_NEQ:</span></div><div class="line"><span class="addition">+return val1 != val2;</span></div><div class="line"><span class="addition">+case TK_LOGIC_AND:</span></div><div class="line"><span class="addition">+return val1 &amp;&amp; val2;</span></div><div class="line"><span class="addition">+case TK_LOGIC_OR:</span></div><div class="line"><span class="addition">+return val1 || val2;</span></div><div class="line"><span class="addition">+case TK_COMMA:</span></div><div class="line"><span class="addition">+return val2;</span></div><div class="line"><span class="addition">+default:</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>最后当然要测试一下，我真的觉得我需要一个单元测试框架了，这样好累</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+void expr_test()&#123;</span></div><div class="line"><span class="addition">+bool success = false;</span></div><div class="line"><span class="addition">+#define N 27</span></div><div class="line"><span class="addition">+char es[][N] = &#123;"3+2", "3-2", "3*2", "3/2",// base test</span></div><div class="line"><span class="addition">+"3==3", "3==2", "3!=3", "3!=2",</span></div><div class="line"><span class="addition">+"1&amp;&amp;0", "1&amp;&amp;1", "1||1", "1||0",</span></div><div class="line"><span class="addition">+"!3", "!0", "32", "0", "0x00", "0xff",</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+"(3+2)", "(-2*3)", "-(3+4)-(-2*3)", "3+2, 3*4",</span></div><div class="line"><span class="addition">+    "*(0x100000)", "$eip", "*$eip", "*($eip + 1)", "*($eip + 2)",</span></div><div class="line"><span class="addition">+&#125;;</span></div><div class="line"><span class="addition">+int res[N] = &#123;5, 1, 6, 1,</span></div><div class="line"><span class="addition">+   1, 0, 0, 1,</span></div><div class="line"><span class="addition">+0, 1, 1, 1,</span></div><div class="line"><span class="addition">+0, 1, 32, 0, 0, 255,</span></div><div class="line"></div><div class="line"><span class="deletion">-  return 0;</span></div><div class="line"><span class="addition">+5, -6, -1, 12,</span></div><div class="line"><span class="addition">+184, 1048576, 184, 52, 18,</span></div><div class="line"><span class="addition">+&#125;;</span></div><div class="line"><span class="addition">+int i;</span></div><div class="line"><span class="addition">+for (i = 0; i &lt; N; i++)&#123;</span></div><div class="line"><span class="addition">+Log("test: %s = %d",es[i], res[i]);</span></div><div class="line"><span class="addition">+int nres = expr(es[i], &amp;success);</span></div><div class="line"><span class="addition">+Assert(nres == res[i], "expr result: %d", nres);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><ul><li><h2 id="监视点"><a href="#监视点" class="headerlink" title="监视点"></a>监视点</h2></li></ul><p>设计接口，设置一个新的监视点时，从 free_ 删掉一个加入 head，删除监视点时相反。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+WP * new_wp(char *str, int value)&#123;</span></div><div class="line"><span class="addition">+if (free_ != NULL)&#123;</span></div><div class="line"><span class="addition">+WP *t = free_;</span></div><div class="line"><span class="addition">+free_ = free_-&gt;next;</span></div><div class="line"><span class="addition">+t-&gt;next = NULL;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (strlen(str) &gt; 31)</span></div><div class="line"><span class="addition">+panic("expression too long");</span></div><div class="line"></div><div class="line"><span class="addition">+strcpy(t-&gt;str, str);</span></div><div class="line"><span class="addition">+t-&gt;value = value;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (head == NULL)&#123;</span></div><div class="line"><span class="addition">+head = t;</span></div><div class="line"><span class="addition">+t-&gt;next = NULL;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+t-&gt;next = head;</span></div><div class="line"><span class="addition">+head = t;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return t;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+void free_wp(int id)&#123;</span></div><div class="line"><span class="addition">+WP *t = head;</span></div><div class="line"><span class="addition">+WP *r = NULL;</span></div><div class="line"><span class="addition">+if (t-&gt;NO == id)&#123;</span></div><div class="line"><span class="addition">+r = t;</span></div><div class="line"><span class="addition">+head = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+while (t-&gt;next != NULL)&#123;</span></div><div class="line"><span class="addition">+if (t-&gt;next-&gt;NO == id)&#123;</span></div><div class="line"><span class="addition">+r = t-&gt;next;</span></div><div class="line"><span class="addition">+t-&gt;next = t-&gt;next-&gt;next;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+t = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (r == NULL)</span></div><div class="line"><span class="addition">+panic("couldnt found wp %d", id);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+r-&gt;value = 0;</span></div><div class="line"><span class="addition">+if (free_ == NULL)&#123;</span></div><div class="line"><span class="addition">+free_ = r;</span></div><div class="line"><span class="addition">+r-&gt;next = NULL;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+r-&gt;next = free_;</span></div><div class="line"><span class="addition">+free_ = r;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>打印监视点只需要遍历 head</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+void show_wp()&#123;</span></div><div class="line"><span class="addition">+WP *t = head;</span></div><div class="line"><span class="addition">+while (t != NULL)&#123;</span></div><div class="line"><span class="addition">+printf("wp [%d], %s: %d\n", t-&gt;NO, t-&gt;str, t-&gt;value);</span></div><div class="line"><span class="addition">+t = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+void show_free()&#123;</span></div><div class="line"><span class="addition">+WP *t = free_;</span></div><div class="line"><span class="addition">+while (t != NULL)&#123;</span></div><div class="line"><span class="addition">+printf("wp [%d], %s: %d\n", t-&gt;NO, t-&gt;str, t-&gt;value);</span></div><div class="line"><span class="addition">+t = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>检查监视点的值是否有变化，检查所有有变化的监视点</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">     /* TODO: check watchpoints here. */</div><div class="line"><span class="deletion">-</span></div><div class="line"><span class="addition">+WP *t = check_wp(NULL);</span></div><div class="line"><span class="addition">+while (t != NULL)&#123;</span></div><div class="line"><span class="addition">+if (nemu_state != NEMU_END)</span></div><div class="line"><span class="addition">+nemu_state = NEMU_STOP;</span></div><div class="line"><span class="addition">+printf("[-] wp [%d]:(%s) has changed, its value is %d\n", t-&gt;NO, t-&gt;str, t-&gt;value);</span></div><div class="line"><span class="addition">+t = check_wp(t);</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+WP * check_wp(WP *w)&#123;</span></div><div class="line"><span class="addition">+if (w == NULL)&#123;</span></div><div class="line"><span class="addition">+w = head;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+while (w != NULL)&#123;</span></div><div class="line"><span class="addition">+bool success;</span></div><div class="line"><span class="addition">+int res = expr(w-&gt;str, &amp;success);</span></div><div class="line"><span class="addition">+if (res != w-&gt;value)&#123;</span></div><div class="line"><span class="addition">+w-&gt;value = res;</span></div><div class="line"><span class="addition">+return w;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+w = w-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return NULL;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>设置监视点和删除监视点</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+static int cmd_w(char *args)&#123;</span></div><div class="line"><span class="addition">+if (args == NULL)&#123;</span></div><div class="line"><span class="addition">+cmd_help("w");</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+char *tok1 = strtok(args, "=");</span></div><div class="line"><span class="addition">+char *tok2 = strtok(NULL, "=");</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+bool success;</span></div><div class="line"><span class="addition">+int res;</span></div><div class="line"><span class="addition">+if (tok2 == NULL)</span></div><div class="line"><span class="addition">+res = expr(tok1, &amp;success);</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+res = expr(tok2, &amp;success);</span></div><div class="line"><span class="addition">+*(tok2-1) = '\0';</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+WP *w = new_wp(tok1, res);</span></div><div class="line"><span class="addition">+   printf("[-] set wp [%d], %s: %d\n", w-&gt;NO, w-&gt;str, w-&gt;value);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+static int cmd_d(char *args)&#123;</span></div><div class="line"><span class="addition">+if (args == NULL)&#123;</span></div><div class="line"><span class="addition">+cmd_help("d");</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+int id = 0;</span></div><div class="line"><span class="addition">+sscanf(args, "%d", &amp;id);</span></div><div class="line"><span class="addition">+free_wp(id);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><h1 id="熟悉i386手册"><a href="#熟悉i386手册" class="headerlink" title="熟悉i386手册"></a>熟悉i386手册</h1><h2 id="必答题"><a href="#必答题" class="headerlink" title="必答题"></a>必答题</h2><blockquote><p>查阅i386手册 理解了科学查阅手册的方法之后, 请你尝试在i386手册中查阅以下问题所在的位置, 把需要阅读的范围写到你的实验报告里面:</p></blockquote><pre><code>EFLAGS寄存器中的CF位是什么意思?        x86结构 carry flagModR/M字节是什么?                    指令格式部分mov指令的具体格式是怎么样的?          指令集细节</code></pre><blockquote><p>shell命令 完成PA1的内容之后, nemu目录下的所有.c和.h和文件总共有多少行代码? 你是使用什么命令得到这个结果的? 和框架代码相比, 你在PA1中编写了多少行代码? (Hint: 使用 git checkout 可以回到”过去”, 具体使用方法请查阅 man git-checkout ) 你可以把这条命令写入 Makefile 中, 随着实验进度的推进, 你可以很方便地统计工程的代码行数, 例如敲入 make count 就会自动运行统计代码行数的命令.</p></blockquote><pre><code>4025行find . -name *.[ch] | xargs wc -l15479 - 14931行git checkout pa0 &amp;&amp; find . | xargs wc -lgit checkout pa1 &amp;&amp; find . | xargs wc -l</code></pre><blockquote><p>再来个难一点的, 除去空行之外, nemu目录下的所有.c和.h文件总共有多少行代码?</p></blockquote><pre><code>3321find . -name *.[ch] | xargs grep -v &quot;^$&quot; | wc -l</code></pre><blockquote><p>使用man 打开工程目录下的 Makefile 文件, 你会在 CFLAGS 变量中看到gcc的一些编译选项. 请解释gcc中的 -Wall 和 -Werror 有什么作用? 为什么要使用 -Wall 和 -Werror ?</p></blockquote><pre><code>W（warning），-Wall（显示所有警告），-Werror（将所有警告视为error）</code></pre><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><blockquote><p>假设你在Windows中使用Virtualbox安装了一个GNU/Linux虚拟机, 然后在虚拟机中完成PA, 通过NEMU运行Hello World程序. 在这样的情况下, 尝试画出相应的层次图.</p></blockquote><pre><code>计算机硬件 -&gt; 操作系统（windows） -&gt; 软件（virtualbox） -&gt; 虚拟硬件（虚拟硬盘等） -&gt; 虚拟操作系统（linux） -&gt; 模拟器软件（NEMU） -&gt; 模拟器硬件（内存，寄存器等） -&gt; 开放接口（操作系统） -&gt; 用户程序（hello world）</code></pre><blockquote><p>程序从哪里开始？</p></blockquote><pre><code>main 函数，main 函数是程序的入口地址。</code></pre><blockquote><p>opcode_table 到底是个什么类型的数组?</p></blockquote><pre><code>opcode_table 是结构体数组</code></pre><blockquote><p>在 cmd_c() 函数中, 调用 cpu_exec() 的时候传入了参数 -1 , 你知道这是什么意思吗?</p></blockquote><pre><code>-1 传给了一个无符号数 uint64，就是最大的数字，n 是执行次数，所以 continue 将依次执行完所有指令。（果然温故而知新啊，古人诚不欺我，写报告的时候才突然想到的）</code></pre><blockquote><p>谁来指示程序的结束?</p></blockquote><pre><code>应该是由指令集确定的吧</code></pre><blockquote><p>体会： 从表达式求值窥探编译器</p></blockquote><pre><code>应该是类似的词法分析，然后建立符号表什么的，最后编译链接成二进制。框架代码中定义 wp_pool 等变量的时候使用了关键字 static , static 在此处的含义是什么? 为什么要在此处使用它?</code></pre><p>这里使用 static 是为了限制变量作用域到只能本文件引用，一般的全局变量可以被其他文件引用。</p><blockquote><p>以下问题涉及到指令，暂时无法理解，可以之后补充</p></blockquote><pre><code>一点也不能长?我们知道 int3 指令不带任何操作数, 操作码为1个字节, 因此指令的长度是1个字节. 这是必须的吗? 假设有一种IA-32体系结构的变种my-IA-32, 除了 int3 指令的长度变成了2个字节之外, 其余指令和IA-32相同. 在my-IA-32中, 文章中的断点机制还可以正常工作吗? 为什么?&quot;随心所欲&quot;的断点如果把断点设置在指令的非首字节(中间或末尾), 会发生什么? 你可以在GDB中尝试一下, 然后思考并解释其中的缘由.NEMU的前世今生你已经对NEMU的工作方式有所了解了. 事实上在NEMU诞生之前, NEMU曾经有一段时间并不叫NEMU, 而是叫NDB(NJU Debugger), 后来由于某种原因才改名为NEMU. 如果你想知道这一段史前的秘密, 你首先需要了解这样一个问题: 模拟器(Emulator)和调试器(Debugger)有什么不同? 更具体地, 和NEMU相比, GDB到底是如何调试程序的?</code></pre><p>Over</p>]]></content>
    
    <summary type="html">
    
      洞察世界的视点 - 简易调试器
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="code" scheme="https://blog.nightmare.xin/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>顺利的 PA0</title>
    <link href="https://blog.nightmare.xin/pa0.html"/>
    <id>https://blog.nightmare.xin/pa0.html</id>
    <published>2018-01-20T09:58:18.000Z</published>
    <updated>2018-01-24T07:59:08.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PA0-世界诞生的前夜-开发环境配置"><a href="#PA0-世界诞生的前夜-开发环境配置" class="headerlink" title="PA0 - 世界诞生的前夜: 开发环境配置"></a>PA0 - 世界诞生的前夜: 开发环境配置</h1><h2 id="Installing-a-GNU-Linux-VM"><a href="#Installing-a-GNU-Linux-VM" class="headerlink" title="Installing a GNU/Linux VM"></a>Installing a GNU/Linux VM</h2><pre><code>我的搭配是 阿里云主机（Ubuntu 16.04 LTS） + docker（debian 9 stretch）</code></pre><h2 id="Installing-Docker"><a href="#Installing-Docker" class="headerlink" title="Installing Docker"></a>Installing Docker</h2><pre><code>在官网下载docker即可</code></pre><p><img src="http://store.nightmare.xin/d0f6c7541943a4c29d0f07ed4518d561.png" alt=""></p><h2 id="Preparing-Dockerfile"><a href="#Preparing-Dockerfile" class="headerlink" title="Preparing Dockerfile"></a>Preparing Dockerfile</h2><pre><code>复制粘贴到Dockerfile并修改username &amp; password</code></pre><p><img src="http://store.nightmare.xin/32a8970410a21f57e48b53f7ebef8026.png" alt=""></p><h2 id="Building-Docker-image"><a href="#Building-Docker-image" class="headerlink" title="Building Docker image"></a>Building Docker image</h2><pre><code>根据Dockerfile建立镜像（原示例debian镜像被我删了）</code></pre><p><img src="http://store.nightmare.xin/c81e728d9d4c2f636f067f89cc14862c.png" alt=""></p><h2 id="Creating-Debian-Container"><a href="#Creating-Debian-Container" class="headerlink" title="Creating Debian Container"></a>Creating Debian Container</h2><pre><code>根据镜像创建容器--name指定容器名字，选择tag v2，-p将本机的20022端口映射到容器的22端口（即ssh端口，通过ssh连接本机的20022端口就可以连接到容器），</code></pre><p><img src="http://store.nightmare.xin/eccbc87e4b5ce2fe28308fd9f2a7baf3.png" alt=""></p><h1 id="First-Exploration-with-GNU-Linux"><a href="#First-Exploration-with-GNU-Linux" class="headerlink" title="First Exploration with GNU/Linux"></a>First Exploration with GNU/Linux</h1><h2 id="SSH-Configuration"><a href="#SSH-Configuration" class="headerlink" title="SSH Configuration"></a>SSH Configuration</h2><pre><code>ssh连接到本地的20022端口（该端口映射容器的ssh端口）-p指定端口号，username是前边添加的用户名，localhost选择本机，配置好用户名，主机号，连接端口后就可以直接使用putty连接容器了</code></pre><p><img src="http://store.nightmare.xin/a87ff679a2f3e71d9181a67b7542122c.png" alt=""></p><h2 id="First-exploration"><a href="#First-exploration" class="headerlink" title="First exploration"></a>First exploration</h2><pre><code>使用ssh连接到容器（debian）用户名是之前设置的，主机名可以修改为自己喜欢的名字，我修改了./bashrc以便登录时直接进入到工作目录（方便做pa1）</code></pre><p><img src="http://store.nightmare.xin/d2a37a9a62bec1cd830223cfc7bd0baf.png" alt=""></p><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><blockquote><p>Where is GUI?</p></blockquote><pre><code>Gui，即graphic user interface，与Cli，command line interface最近看《x86汇编》，了解到显示器，或者说显卡有两种工作方式。一屏有很多像素点，可以通过设置这些像素点的亮暗和颜色来显示界面，即依次渲染每一个像素点，这是图形界面。第二种实现准备一些字符，这样不必关心该字符每一个像素点是如何渲染的，即命令行界面。因此debian要比windows看起来小得多。</code></pre><blockquote><p>Have you wondered if there is something that you can do it in CLI,but can not in GUI? Have no idea? If you are asked to count how many lines of code you have coded during the 程序设计基础 course, what will you do?</p></blockquote><pre><code>图形界面能做的命令行基本都能做，命令行能做的图形界面未必能做，因为图形界面将许多细节封装在黑盒子里我们触碰不到。统计行数 cat test.txt | wc –l。</code></pre><blockquote><p>why vim is called 编辑器之神.</p></blockquote><pre><code>Vim 支持多种平台，有多种工作模式，各种便利的快捷键。。</code></pre><blockquote><p>Why Windows is quite “fat”?</p></blockquote><pre><code>大概是因为桌面系统吧。。</code></pre><p>&gt;<br>    最后exit退出登录。</p><h1 id="Installing-Tools"><a href="#Installing-Tools" class="headerlink" title="Installing Tools"></a>Installing Tools</h1><h2 id="Checking-network-state"><a href="#Checking-network-state" class="headerlink" title="Checking network state"></a>Checking network state</h2><pre><code>Ping百度，-c指定ping的次数</code></pre><p><img src="http://store.nightmare.xin/2071475516c2e4c025ca20cc3a796168.png" alt=""></p><h2 id="Updating-pakage-information"><a href="#Updating-pakage-information" class="headerlink" title="Updating pakage information"></a>Updating pakage information</h2><pre><code>替换apt源为中科大的源，update从源列表更新信息，upgrade升级本地软件到最新版本。一些重要的操作需要超级管理员权限，防止误操作造成大的损失吧。。关机当然是很重要的操作。</code></pre><h2 id="Install-tools-for-pas"><a href="#Install-tools-for-pas" class="headerlink" title="Install tools for pas"></a>Install tools for pas</h2><pre><code>依次安装build工具包，gdb，git，libreadline-dev，libsdl2-dev，qemu-system-x86</code></pre><h2 id="Configuring-vim"><a href="#Configuring-vim" class="headerlink" title="Configuring vim"></a>Configuring vim</h2><pre><code>安装vim，输入vimtutor，学习操作配置vim语法高亮（去掉注释）学习diff格式配置更多vim特性</code></pre><h1 id="More-Exploration"><a href="#More-Exploration" class="headerlink" title="More Exploration"></a>More Exploration</h1><h2 id="Learning-to-use-basic-tools"><a href="#Learning-to-use-basic-tools" class="headerlink" title="Learning to use basic tools"></a>Learning to use basic tools</h2><pre><code>学习基本linux知识练习hello world</code></pre><p><img src="http://store.nightmare.xin/987e7c907b3754c2c256297859d9ffb3.png" alt=""></p><pre><code>学习makefile学习gdb学习man，为了方便同时安装了man中文手册</code></pre><p><img src="http://store.nightmare.xin/26223a03a8150a53c62b0670234c4851.png" alt=""></p><p><img src="http://store.nightmare.xin/3ac1943c40b23d003e9e0bb811110e42.png" alt=""></p><pre><code>学习read the fuck manual</code></pre><h2 id="Install-tmux"><a href="#Install-tmux" class="headerlink" title="Install tmux"></a>Install tmux</h2><pre><code>安装使用tmux</code></pre><p><img src="http://store.nightmare.xin/c5fc3450f457b4ce88e769cc25a3b258.png" alt=""></p><blockquote><p>滚动条?</p></blockquote><pre><code>《x86汇编：从实模式到保护模式》有一章使用汇编实现了滚动条，即下滚一行就是将每一行的字符依次重新写到上一行，第一行存入内存，最后一行使用默认的黑色背景空字符。</code></pre><blockquote><p>Transfer files betwoon host and container？</p></blockquote><pre><code>我使用的是xftp，如果是在ubuntu和docker传文件的话就用scp</code></pre><p><img src="http://store.nightmare.xin/68208c81cb8beeae85f58fb8efa79e02.png" alt=""></p><p><img src="http://store.nightmare.xin/2ad3d65d1a1aad9b7422c1f3954b7fca.png" alt=""></p><p><img src="http://store.nightmare.xin/ee3cf09c2ef5bb06fd08ddfc3e74440a.png" alt=""></p><h1 id="Acquire-source-code-for-pas"><a href="#Acquire-source-code-for-pas" class="headerlink" title="Acquire source code for pas"></a>Acquire source code for pas</h1><h2 id="Getting-source-code"><a href="#Getting-source-code" class="headerlink" title="Getting source code"></a>Getting source code</h2><blockquote><p>为什么不使用root账户做实验</p></blockquote><pre><code>因为容易误操作造成重大灾难。</code></pre><p>&gt;<br>    git clone 代码到本地<br>    配置git<br>    切换分支master<br>    运行git初始化<br>    学习git<br><img src="http://store.nightmare.xin/cfdb221d6a5487249b8f16a9e59ae5de.png" alt=""></p><pre><code>我已经commit了, 运行make run，已经做完cpu的配置，所以没错误（切换到了pa1）。。</code></pre><p><img src="http://store.nightmare.xin/7b46593209cb61e2e5e2eb0bff2bd01e.png" alt=""></p><p><img src="http://store.nightmare.xin/fc29afb1f09a66c6e3489dd42b457924.png" alt=""></p><p><img src="http://store.nightmare.xin/ac7d9a906d6339418a161961dd33d9ec.png" alt=""></p><p><img src="http://store.nightmare.xin/948c8095dd3bd55d81f8ebd1219acfe3.png" alt=""></p><pre><code>gdb正常</code></pre><p><img src="http://store.nightmare.xin/85d08050c9d8f25555b0a9094f5328c5.png" alt=""></p><pre><code>文件结构</code></pre><p><img src="http://store.nightmare.xin/eb33f58daf8434ced28be3d709ae1797.png" alt=""></p><p>Over</p>]]></content>
    
    <summary type="html">
    
      世界诞生的前夜 - 开发环境配置
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="code" scheme="https://blog.nightmare.xin/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET 课程设计报告</title>
    <link href="https://blog.nightmare.xin/asp.html"/>
    <id>https://blog.nightmare.xin/asp.html</id>
    <published>2017-12-17T09:58:18.000Z</published>
    <updated>2017-12-17T10:08:14.376Z</updated>
    
    <content type="html"><![CDATA[<ul><li>网站地址 <a href="http://nightmare.xin/" target="_blank" rel="external">nightmare.xin</a></li><li><p>支持注册和登录功能， 有后台数据库， 登陆成功会跳转。</p></li><li><p>前端UI 秦瑞哲</p></li><li>后端处理 程斌</li><li>2017/12/11</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次课程要求设计一个网站，这就涉及到编程语言和框架的选取问题，之前只是粗略的学了一些 bootstrap，甚至连 jQuery 都没怎么用过，短时间内应该做不出什么太大的进展，索性专注于后端的设计。学过一点 php 和 python，但都是一些简单的 php 页面，在 thinkphp 和 flask 之间最终选择了 flask (<del>听说要比 Django 轻量级很多</del>)</p><h2 id="python-flask-apache-mysql"><a href="#python-flask-apache-mysql" class="headerlink" title="python + flask + apache + mysql"></a>python + flask + apache + mysql</h2><p>静态网站比如 hexo 是没有后台的，不具备处理请求的能力，而我也不打算使用这些一键建站(lamp甚至wordpress之类)的框架。因此需要自己设计一些接口供前端调用。下面是服务器的一些配置：主机(ubuntu 16.04 LTS)，web 服务器(apache 2.4)，数据库(mysql 5.7)，编程语言选择 python 和它的 web 框架 flask。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先是 apache 的配置，apache 负责接收和处理请求。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></div><div class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> nightmare.xin</div><div class="line">        <span class="attribute">WSGIScriptAlias</span> / /var/www/web/flaskapp.wsgi</div><div class="line">        <span class="section">&lt;Directory /var/www/web/app/&gt;</span></div><div class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</div><div class="line">            <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></div><div class="line">        <span class="section">&lt;/Directory&gt;</span></div><div class="line">        <span class="attribute">Alias</span> /static /var/www/web/app/static</div><div class="line">        <span class="section">&lt;Directory /var/www/web/app/static/&gt;</span></div><div class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</div><div class="line">            <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></div><div class="line">        <span class="section">&lt;/Directory&gt;</span></div><div class="line">        <span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</div><div class="line">        <span class="attribute">LogLevel</span> warn</div><div class="line">        <span class="attribute">CustomLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure></p><p>apache 接收请求后转发给 wsgi 处理，由 wsgi 传给应用程序，wsgi 是一套 apache, flask 都支持的标准，因此用作 web 服务器和应用程序之间的接口来简化后端设计。(首先载入 wsgi 模块，wsgi 的配置则基本不需要更改)(静态文件目录和错误/访问日志目录很重要)</p><p>该接口定义为如下 flaskapp.wsgi<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.insert(<span class="number">0</span>, <span class="string">"/var/www/web"</span>)</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line">application = app</div></pre></td></tr></table></figure></p><p>除了将网站根目录加入 path，该接口将 apache 请求处理转发到 app 对象(app 可以理解为一个 flask 应用程序对象)</p><p>该配置在 app/<strong>init</strong>.py 文件中，定义了如何处理请求的具体方法(建立路由表并编写处理代码)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, abort, redirect, url_for, send_from_directory</div><div class="line"><span class="comment">#from flask_bootstrap import Bootstrap</span></div><div class="line"><span class="comment">#from flask_moment import Moment</span></div><div class="line"><span class="comment">#from datetime import datetime</span></div><div class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"><span class="comment">#bootstrap = Bootstrap(app)</span></div><div class="line"><span class="comment">#moment = Moment(app)</span></div><div class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://web_python:web_python@localhost/web_python'</span></div><div class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">True</span></div><div class="line">db = SQLAlchemy(app)</div><div class="line">db.create_all()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">'Login/index.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/signin', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">()</span>:</span></div><div class="line">    username = request.form[<span class="string">'username'</span>]</div><div class="line">    password = request.form[<span class="string">'password'</span>]</div><div class="line">    <span class="keyword">if</span> User.query.filter_by(username=username, password=password).first() != <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> app.send_static_file(<span class="string">'Backstage/tables.html'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> app.send_static_file(<span class="string">'Login/index.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/signup', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">signup</span><span class="params">()</span>:</span></div><div class="line">    username = request.form[<span class="string">'username'</span>]</div><div class="line">    password = request.form[<span class="string">'password'</span>]</div><div class="line">    email = request.form[<span class="string">'email'</span>]</div><div class="line"></div><div class="line">    u = User(username=username, password=password, email=email)</div><div class="line">    db.session.add(u)</div><div class="line">    db.session.commit()</div><div class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">'Login/index.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'404.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p><p>其中用到了 Mysql 数据库，这里新建一个 web_python 的数据库，并新建一个名为 web_python 的用户，密码设置为 web_python，权限设置为允许任意ip登录，但只授权操作 web_python 数据库。</p><p><img src="http://store.nightmare.xin/37693cfc748049e45d87b8c7d8b9aacd.png" alt=""></p><p>sqlalchemy 模块提供了非常简便的方法使 flask 程序 mysql 交互<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">app = Flask(__name__)</div><div class="line">db = SQLAlchemy(app)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="keyword">True</span>)</div><div class="line">    password = db.Column(db.String(<span class="number">80</span>), unique=<span class="keyword">True</span>)</div><div class="line">    email = db.Column(db.String(<span class="number">80</span>), unique=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password,  email)</span>:</span></div><div class="line">        self.username = username</div><div class="line">        self.password = password</div><div class="line">        self.email = email</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % self.username</div></pre></td></tr></table></figure></p><p>以上代码将 python 类对象抽象为一个数据库，该类的变量作为字段名。</p><p>对数据库的操作被封装为以下函数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.create_all() 创建数据库和初始化</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.add</span>() 添加一条记录</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.update</span>() 更新</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.delete</span>() 删除</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.commit</span>() 将修改提交到远程数据库</div><div class="line">... ...</div></pre></td></tr></table></figure></p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>中途服务器出现过几次问题，比如网页请求502呀，资源请求404呀，apache无法启动呀，无法定向到指定的url呀。 通过google和stackoverflow解决了，一个惨痛的教训是，一定记得看错误日志(在/var/log/下相应子目录)…</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对 web 知识了解又加深了一些</p>]]></content>
    
    <summary type="html">
    
      python + flask + apache + mysql 后台处理请求
    
    </summary>
    
      <category term="demo" scheme="https://blog.nightmare.xin/categories/demo/"/>
    
    
      <category term="demo" scheme="https://blog.nightmare.xin/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>Makefile 学习小记</title>
    <link href="https://blog.nightmare.xin/makefile.html"/>
    <id>https://blog.nightmare.xin/makefile.html</id>
    <published>2017-11-16T03:51:00.000Z</published>
    <updated>2017-11-21T12:49:36.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>参考文章：</p><ul><li><a href="https://seisman.github.io/how-to-write-makefile/overview.html" target="_blank" rel="external">跟我一起写 Makefile</a></li><li><a href="https://github.com/oxnz/clang-user-manual/wiki/Clang-%E4%B8%AD%E6%96%87%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C" target="_blank" rel="external">Clang 中文用户手册</a></li><li><a href="http://blog.sina.com.cn/s/blog_4de067e40102ds7d.html" target="_blank" rel="external">编译器 cc、gcc、g++、CC 的区别</a></li><li><a href="https://www.zhihu.com/question/39952667" target="_blank" rel="external">MinGW、MinGW-w64 与TDM-GCC 应该如何选择？</a></li><li><a href="http://blog.csdn.net/vlily/article/details/7247888" target="_blank" rel="external">C++ 函数系列篇：函数的默认值+带默认参数的函数</a></li><li><a href="http://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html" target="_blank" rel="external">g++ 参数介绍</a></li><li><a href="https://tonghuix.io/2012/04/cc%E7%9A%84%E9%80%9A%E7%94%A8makefile%E6%A8%A1%E6%9D%BF/" target="_blank" rel="external">C/C++ 的通用Makefile模板</a></li><li><a href="https://sourceforge.net/projects/gcmakefile/" target="_blank" rel="external">Generic Makefile for C/C++ Programs</a></li></ul><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>TODO list：</p><ul><li><del>自动从源文件寻找依赖</del></li><li><del>批量处理多个程序</del></li><li><del>一键清理</del></li><li>more…</li></ul><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>下边是我实现的 makefile 模板。</p><p><a href="https://github.com/kur0mi/tools/blob/master/Makefile/Makefile%20v1.0" target="_blank" rel="external">Makefile 模板 v1.0</a></p><p><a href="https://github.com/kur0mi/tools/blob/master/Makefile/Makefile%20v2.0" target="_blank" rel="external">Makefile 模板 v2.0</a></p>]]></content>
    
    <summary type="html">
    
      Makefile 关系到了整个工程的编译规则。一个工程中的源文件不计其数，并且按类型、功能、模块分别放在若干个目录中，makefile 定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="python" scheme="https://blog.nightmare.xin/tags/python/"/>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/tags/Demo/"/>
    
      <category term="Makefile" scheme="https://blog.nightmare.xin/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>南航计算机学院第六期科创</title>
    <link href="https://blog.nightmare.xin/rainbow.html"/>
    <id>https://blog.nightmare.xin/rainbow.html</id>
    <published>2017-11-09T10:40:25.000Z</published>
    <updated>2017-11-21T11:14:59.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>em… 科创成功结题了，总要写点什么</p><p>差不多是去年9,10月左右吧，那时候组队接下了这个题目，“基于sha256算法及并行编程语言的快速密码破解方法研究与实现”。 然后就开始填项目申报书，开题报告啥的，查各种资料，差不多今年一月左右审核结束，审核完了就正式开始了。 今年6月份有一次中期检查(也是我第一次上台答辩233)，那次比较水，去参加答辩的队伍都让通过了。 然后今年10月结题形式改成了成果展示，有学弟学妹学长学姐评委老师来围观。 然后今天下午结果公示，科创通过了…</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>那么，我们做的这个项目是个啥呢？</p><p>网络传输中密码如果用明文传输，或者数据库中密码用明文保存，那么只要能够获取到这部分数据就可以轻而易举的拿到密码。 这时采取的一种策略是进行hash加密，简单理解就是一种理论上不可逆的加密(无法从密文计算出明文)。 或者一些软件或文件被恶意修改之后放在网上，不经意下载安装就存在安全问题。 这时可以对软件/文件进行hash校验和，根据hash值是否相等来判断软件/文件是否被修改过。</p><p>而我们的项目就是破解hash算法家族的其中一种(sha256)(怎么越解释越像在做坏事…)</p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>破解过程类似暴力破解，借鉴一种时空折中算法(权衡时间和空间使其理论可行)，预先生成一张彩虹表，破解时进行查表获取明文。</p><p>彩虹表长什么样？</p><p>一条彩虹表有许多条彩虹链组成，一条彩虹链上有许多结点，一个结点对应一个明文/密文。 由于彩虹表数据量十分庞大(反正你买不起那么大的硬盘)，最后只选择存储每条链的第一个结点和最后一个结点(一般一个结点占8个字节(64bit))，需要时不是直接查表，而是先取出这些彩虹链将其展开，即用时间换取空间。</p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>说说科创中遇到的一些麻烦事吧。</p><p>科创申报的时候才大一，开始做的时候也才大一下，那时候要安装vs，还要安装cuda/opencl，安装过程磕磕碰碰，vs操作也不懂，各种error，查找路径，动/静态链接，硬件，cpu，gpu，指令，内存，线程，进程，并行，冲突，碰撞，锁，线程交互什么的一点概念都没有，这个项目要做什么怎么做也啥都不知道，当时还不会谷歌，百度搜来搜去就那点基础的东西。 很烦就是了，不过回忆起来，很多概念也是那时候开始建立的，也算是”不是那么糟糕的事情”了。</p><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>那时候就记得是要做并行，整个项目主要就是要提升计算速度，通过大规模并行来提升速度。 再进行优化什么的进一步提高。</p><p>并行就是多个指令一起运行，那JAVA不是就有多线程么，C语言也有多线程，想要的话fork一个就可以了。 这些多线程实质上仍是由一个CPU驱动的，其”并行”只是CPU对多个线程的切换。 就算它们可以驱动多核CPU或GPU进行真正的并行，，，，，效果也绝对没有我们那么好。</p><p>CUDA/OPENCL是什么呢？</p><p>首先，由很多硬件厂商共同制定了一个标准(参照ASCII)，大家都遵循这个标准，然后不同的厂商设计的硬件(cpu/gpu)就会支持这个标准，也会有不同的拓展。 CUDA/OPENCL就是提供了一套接口(参照shell)，使我们可以用高级语言直接去操纵底层CPU/GPU，即操控硬件实现真正的并行，根据CPU/GPU的结构和各个参数，辅以不断地测试，进行各种优化，达到最大化利用计算资源的目的(都这样了速度能不快吗)</p><h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p>于是当时懵逼的我们，用着懵逼的vs，使用懵逼的CUDA/OPENCL语言，去写一些什么都不懂的东西(年少不懂事)…</p><p>现在回想起来还是很感叹，计算机世界就像宇宙无穷无尽，那时候的我就像是硬生生的挖开了一个洞，洞越来越大，也就越会发现自己的不足。 <a href="http://www.freebuf.com/articles/others-articles/68711.html" target="_blank" rel="external">推荐阅读: 程序员学习之路</a></p><h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>这篇文章全是我自己写的，写完还是很满意的(骄傲.jpg)… 就把它归到新分类[Chain]里边吧。</p><p>ps: 我感冒应该是好了的，然而今天测了1000米跑，跑完又感冒了，就不该脱衣服…</p>]]></content>
    
    <summary type="html">
    
      结题了, .. .. .. yea
    
    </summary>
    
      <category term="Chain" scheme="https://blog.nightmare.xin/categories/Chain/"/>
    
    
      <category term="科创" scheme="https://blog.nightmare.xin/tags/%E7%A7%91%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>插入排序 学习小记</title>
    <link href="https://blog.nightmare.xin/insert.html"/>
    <id>https://blog.nightmare.xin/insert.html</id>
    <published>2017-11-08T09:24:26.000Z</published>
    <updated>2017-11-08T09:48:19.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easy-version"><a href="#easy-version" class="headerlink" title="easy version"></a>easy version</h1><p>一种简单的想法…</p><p>一开始只有一个字符，认为它是有序的； 后来出现了第二个字符，寻找恰当的位置插入，这时它们又变得有序了；</p><p>然后出现了第三个字符，寻找恰当的位置插入，它们还是有序的； 然后第四个…</p><p>C语言代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inserch_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> k = i + <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> temp = a[k];</div><div class="line"><span class="keyword">while</span> (temp &lt; a[k - <span class="number">1</span>] &amp;&amp; k &gt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">a[k] = a[k - <span class="number">1</span>];</div><div class="line">k--;</div><div class="line">&#125;</div><div class="line">a[k] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="hard-version"><a href="#hard-version" class="headerlink" title="hard version"></a>hard version</h1><p>基于一种递归思想，现在要对n个数据排序，那么只需要先将前n-1个数据排序，再将最后一个元素插入；</p><p>然后知道递归到最后只需对一个元素排序。</p><p>函数大概会长这样：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void <span class="function"><span class="title">fun</span><span class="params">(int a[], int n)</span></span>    <span class="comment">//对前n个数据排序</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>):</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line"></div><div class="line">    b = <span class="function"><span class="title">fun</span><span class="params">(a, n<span class="number">-1</span>)</span></span>;</div><div class="line">    <span class="comment">//将最后一个元素插入b中</span></div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>嗯，差不多就这样</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最近网安比赛比较多，打算停一段时间开始补补作业了，毕竟还没做好挂科的准备。</p><p>ps: 感冒可以说马上就要好了么… 倒是快好啊</p>]]></content>
    
    <summary type="html">
    
      插入排序认为一部分字符总是有序的，并且在插入新的字符后仍然保持有序。
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="排序" scheme="https://blog.nightmare.xin/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://blog.nightmare.xin/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://blog.nightmare.xin/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>今天的云很好看啊</title>
    <link href="https://blog.nightmare.xin/cloud.html"/>
    <id>https://blog.nightmare.xin/cloud.html</id>
    <published>2017-11-06T14:11:43.000Z</published>
    <updated>2017-11-21T11:12:14.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>忘了从0开始计数了，特意返回来补上…</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>em.. 感冒已经很轻了，应该是要好了，终于可以免受这种痛苦了，算是这段时间的一个好消息。 再休息几天吧，暂停了一周的跑步计划也该重新开始了(又想到1000米跑逐步临近，有点迫不及待的想检测一下这段时间的成果呢)。 话说，我为什么总会感冒呢..</p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>近期的CTF比赛有上海的比赛和浙警的比赛，上海的网安大赛太难了，勉强做了一道100分的sql注入就跑路了，学长们很厉害，用我们的账号打到前几名。</p><p>浙警的比赛今天刚刚开始，分三周三次小比赛，听学长说题目对萌新比较友好，怀着激动的心情去玩了玩，几分郁闷，几分开心。</p><p><img src="http://store.nightmare.xin/0593ceb4c528a20a4daf1f70f0c70ebf.png" alt=""></p><p>就我自己的感觉吧，没有特别水的题，题目难度基本分为<strong>突然就做出来了</strong>和<strong>做到死也做不出来</strong>两种。</p><p>应该是很多大表哥对这种小比赛不感兴趣，侥幸混个no.10。</p><p><img src="http://store.nightmare.xin/28b1895a15ed5e7d4e8fc83bbfb15495.png" alt=""></p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>数据结构讲到了tree(树)了，今天认真听了一下，感觉老师讲的还是很好的，讲的很详细听的也有意思，以前为什么不想听呢，其实以前内心是有点反感的，大部分人都没有什么编程能力就去讲数据结构算法什么的，数据结构是算法的基础，算法是程序的灵魂嘛，但是这些要建立在代码熟练的基础上，嗯em.. 反感的最初来源应该是编程速成班，快速培训或校园招聘什么的，不理解那些人的心态，完全就是抱着”试试看，或许我成功了呢”，或者”我周围人都那么做，我那么做也没什么嘛”的心态？ 一边渴望得到认可，一边又沉醉在”周围人都和我一样”的心态中，或许是我性格比较孤僻的原因么</p><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>谈到性格改变什么的，在大二认识的伙伴们可能会觉得我平时在一起时不太爱讲话，其实比起大一已经好多了，大一认识的伙伴们应该有体会，一年我还是学到了些什么有很大改变的，提到了大一就不得不提起高中和初中了，初中被欺负，高中没住校，六年与人交流可以说是非常少之又少了… 刚进大学也只想混日子混过去的，至于为什么突然转变，这就不得不说提起我的大姐姐了，由于在博客中又是不太好提的就不提了… (想知道的直接问我嘛，又不是不能说(骄傲.jpg))</p><h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p>嘛，现在社会还是太浮躁了</p><h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>我的小窝还是装的很不错了，改天再买个放东西的架子什么的，对了，我的二次元枕套也要买</p><h1 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h1><p>哇，都0x07了，再写点什么呢</p><h1 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h1><p>人生有很多选择，有些很重要，但更重要的是选择之后坚持走下去。</p><h1 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h1><p>其实我特别想知道都有谁看过我的博客，想写个签到评论什么的功能，但是，本菜鸡懒啊…</p><h1 id="0x0a"><a href="#0x0a" class="headerlink" title="0x0a"></a>0x0a</h1><p>乒乓球握拍姿势感觉越来越奇怪，很别扭，难受</p><p>上次打赢了了一个小姐姐还不服气(哼~)</p><h1 id="0x0b"><a href="#0x0b" class="headerlink" title="0x0b"></a>0x0b</h1><p>到这里结束了，为什么呢，因为马上要熄灯断网了</p>]]></content>
    
    <summary type="html">
    
      随便记点什么吧，想到哪写到哪233
    
    </summary>
    
      <category term="Life" scheme="https://blog.nightmare.xin/categories/Life/"/>
    
    
      <category term="Life" scheme="https://blog.nightmare.xin/tags/Life/"/>
    
      <category term="daily" scheme="https://blog.nightmare.xin/tags/daily/"/>
    
  </entry>
  
  <entry>
    <title>Kurumi</title>
    <link href="https://blog.nightmare.xin/kurumi.html"/>
    <id>https://blog.nightmare.xin/kurumi.html</id>
    <published>2017-11-03T13:59:13.000Z</published>
    <updated>2017-11-03T15:04:03.868Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，给大家介绍一下，<strong>Tokisaki Kurumi</strong> (时崎狂三)，精灵识别名为 <strong>nightmare</strong> (梦魇)，出自作品 <strong>date a live</strong>，这是一个充满矛盾的角色，优雅而疯狂，理解而理智，善良而妩媚，坚强而孤独，神秘而悲伤</p><p><img src="http://store.nightmare.xin/6364d3f0f495b6ab9dcf8d3b5c6e0b01.jpg" alt=""></p><p>作为卡巴拉生命之树中的第3质点Binah(译作理解)。数字是3、颜色是黑色、宝石是珍珠、金属是铅、惑星以土星为象征。被称为至高的母、象征女性原理。代表成熟的女性。神名是Elohim。守护天使是Zaphkiel。</p><p><img src="http://store.nightmare.xin/109a859d777f350ee27e322df2738ec5.png" alt=""></p><p>时钟之眼，崎岖之路，狂我之心，三噩之梦。</p><p>时无诳语，崎如逝行，狂而柔软，三逆轮回。</p><p>时光倒流，崎路尽头，狂而病娇，三推不倒。</p><p>时如流水，崎如清沙，狂岭飞虹，三峻樽花。</p><p>时光停转，崎路何安，狂梦唯叹，三生有伴。</p><p>时逝云烟散，崎路夜雨寒，狂风烛影乱，三尺流年<br>叹。</p><p>时夜魇梦舞，崎路魂断河，狂风追留逝，三情思暮道。</p><p>时湮轮回换，崎岖流年染，狂风卷衣衫，三笑颜不变。</p><p>时光之沉淀，崎途之惘然，狂乱的青春，三世的轮回。</p><p>时桥偶乐遇，崎转遗石板，狂思难忘美，三遇还素琴。</p><p>时如流觞曲水，崎如镜花水月，狂歌晓风残月，三觅千里千寻。</p><p>时光荏苒逝如斯，崎岖之路夜寒蝉，狂心不泯终有时，三千弱水渡未迟。</p><p>时幕天钟转轮回，崎曲泪离血染飞。狂焉病笑笑尘罪，三生只为一人归。</p>]]></content>
    
    <summary type="html">
    
      游荡于黑暗与光明之间， 亦正亦邪的精灵
    
    </summary>
    
      <category term="无悔二次元" scheme="https://blog.nightmare.xin/categories/%E6%97%A0%E6%82%94%E4%BA%8C%E6%AC%A1%E5%85%83/"/>
    
    
      <category term="date a live" scheme="https://blog.nightmare.xin/tags/date-a-live/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法 学习小记</title>
    <link href="https://blog.nightmare.xin/kmp.html"/>
    <id>https://blog.nightmare.xin/kmp.html</id>
    <published>2017-11-02T03:35:58.000Z</published>
    <updated>2017-11-02T05:00:35.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>参考文章<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">字符串匹配的KMP算法</a></p><h2 id="简易的匹配算法"><a href="#简易的匹配算法" class="headerlink" title="简易的匹配算法"></a>简易的匹配算法</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">对于字符串匹配，一种显而易见的想法是</div><div class="line">[<span class="symbol">B</span>]<span class="symbol">ABABCABCD</span></div><div class="line">[<span class="symbol">A</span>]<span class="symbol">BC</span></div><div class="line"></div><div class="line"><span class="symbol">B</span>[<span class="symbol">A</span>]<span class="symbol">BABCABCD</span></div><div class="line"> [<span class="symbol">A</span>]<span class="symbol">BC</span></div><div class="line"></div><div class="line">开始尝试匹配下一位</div><div class="line"><span class="symbol">BA</span>[<span class="symbol">B</span>]<span class="symbol">ABCABCD</span></div><div class="line"> <span class="symbol">A</span>[<span class="symbol">B</span>]<span class="symbol">C</span></div><div class="line"></div><div class="line"><span class="symbol">BAB</span>[<span class="symbol">A</span>]<span class="symbol">BCABCD</span></div><div class="line"> <span class="symbol">AB</span>[<span class="symbol">C</span>]</div><div class="line"></div><div class="line">当检测到<span class="symbol">A</span>,<span class="symbol">C</span>不匹配</div><div class="line">则退回到主串匹配开始的下一位重新匹配</div><div class="line"><span class="symbol">BA</span>[<span class="symbol">B</span>]<span class="symbol">ABCABCD</span></div><div class="line">  [<span class="symbol">A</span>]<span class="symbol">BC</span></div><div class="line"></div><div class="line">这一过程称为<span class="string">'回溯'</span></div><div class="line">显然因为大量的回溯使得在最坏情况下时间复杂度达到了<span class="symbol">O</span>(n*m)</div></pre></td></tr></table></figure><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">对于形如下的匹配</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">    <span class="symbol">ABCDAB</span>[<span class="symbol">D</span>]</div><div class="line"></div><div class="line">基于一种事实，即我们已经知道已经成功匹配的部分是 <span class="symbol">ABCDAB</span>，那么在</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">        <span class="symbol">AB</span>[<span class="symbol">C</span>]<span class="symbol">DABD</span></div><div class="line"></div><div class="line">之前的部分都是冗余的，<span class="symbol">KMP</span>算法通过对子串的特殊处理直接跳转到这一步，避免了回溯。</div><div class="line">构建一张表如下</div><div class="line"><span class="symbol">ABCDABD</span></div><div class="line"><span class="number">0000120</span></div><div class="line"></div><div class="line">其中<span class="symbol">A</span>=<span class="number">1</span>代表若字符<span class="string">'A'</span>已经匹配，则新的匹配可以从子串中序号为<span class="number">1</span>的字符<span class="string">'B'</span>(从<span class="number">0</span>开始计数)重新开始。</div><div class="line"><span class="symbol">B</span>=<span class="number">2</span>则表示由于<span class="string">'AB'</span>已经匹配，子串开头的<span class="string">'AB'</span>就不用再额外匹配了，即从<span class="string">'C'</span>开始匹配。</div><div class="line"></div><div class="line">对于这张表的使用解读如下</div><div class="line">当匹配到</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">    <span class="symbol">ABCDAB</span>[<span class="symbol">D</span>]</div><div class="line"></div><div class="line">因为前一个字符<span class="symbol">B</span>=<span class="number">2</span>，则可以直接跳转到</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">        <span class="symbol">AB</span>[<span class="symbol">C</span>]<span class="symbol">DABD</span></div></pre></td></tr></table></figure><h2 id="‘表’的计算"><a href="#‘表’的计算" class="headerlink" title="‘表’的计算"></a>‘表’的计算</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">以<span class="string">'ABCD[A]BD'</span>中的<span class="string">'A'</span>为例</div><div class="line"></div><div class="line">取出<span class="string">'ABCDA'</span></div><div class="line">计算前缀字符串[<span class="string">'A'</span>, <span class="string">'AB'</span>, <span class="string">'ABC'</span>, <span class="string">'ABCD'</span>]</div><div class="line">计算后缀字符串[<span class="string">'BCDA'</span>, <span class="string">'CDA'</span>, <span class="string">'DA'</span>, <span class="string">'A'</span>]</div><div class="line">找出其中相同的字符串<span class="string">'A'</span></div><div class="line">该字符串的长度为<span class="number">1</span></div><div class="line">若结果有多个，取长度最大的</div></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>不想慢慢造轮子，就用python写了，能体现算法就好Orz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">s = <span class="string">'BBC ABCDAB ABCDABCDABDE'</span></div><div class="line">t = <span class="string">'ABCDABD'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPat</span><span class="params">(s)</span>:</span></div><div class="line">    r1 = [s[:i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>)]</div><div class="line">    r2 = [s[i+<span class="number">1</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>)]</div><div class="line">    <span class="keyword">return</span> max([len(x) <span class="keyword">for</span> x <span class="keyword">in</span> r1 <span class="keyword">if</span> x <span class="keyword">in</span> r2] + [<span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetAllPat</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> [GetPat(s[:i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(s, t)</span>:</span></div><div class="line">    pat = GetAllPat(t)</div><div class="line">    <span class="comment">#print pat</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    j = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; len(s):</div><div class="line">        <span class="keyword">while</span> i &lt; len(s) <span class="keyword">and</span> j &lt; len(t):</div><div class="line">            <span class="keyword">if</span> s[i] == t[j]:</div><div class="line">                i += <span class="number">1</span></div><div class="line">                j += <span class="number">1</span></div><div class="line">                <span class="keyword">print</span> i, j</div><div class="line">            <span class="keyword">elif</span> j == <span class="number">0</span>:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                j = pat[j<span class="number">-1</span>]</div><div class="line">                </div><div class="line">        <span class="keyword">if</span> i == len(s):</div><div class="line">            <span class="keyword">print</span> <span class="string">'traverse end.'</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            j = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(s, t)</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>ps: 感冒貌似快好了(一感冒真的除了躺着什么都不想做…)</p>]]></content>
    
    <summary type="html">
    
      KMP是一种字符串匹配算法，通过对模式字符串的处理，可以达到O(n+m)的时间复杂度
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="KMP" scheme="https://blog.nightmare.xin/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>pyqt 学习小记(一)</title>
    <link href="https://blog.nightmare.xin/pyqt.html"/>
    <id>https://blog.nightmare.xin/pyqt.html</id>
    <published>2017-10-31T12:46:06.000Z</published>
    <updated>2017-11-21T12:53:40.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先google找教程</p><p>参考<a href="http://pyqt.sourceforge.net/Docs/PyQt5/" target="_blank" rel="external">sourceforge上的一个英文文档</a>和<a href="http://code.py40.com/pyqt5/" target="_blank" rel="external">中文教程</a></p><p>使用pip安装<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> -m pip install <span class="keyword">python</span>-qt5</div></pre></td></tr></table></figure></p><p>ps: 因为我的pip出了一些问题所以前边加python -m</p><p>尝试后发现下载速度太慢而且网络连接会中断，不能忍，直接去官网找压缩包，结果在官网下载到一个gpl的包… what’s fxxk，这是啥</p><p>顿时觉得pyqt的安装不是那么顺利了，翻到一篇文章<a href="https://zhuanlan.zhihu.com/p/25561911" target="_blank" rel="external">python2+pyqt5安装</a>，这么复杂，还要自己编译，可能是pyqt5太新了，我也不是那么强迫症的人，试试其他的。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> -m pip install <span class="keyword">python</span>-qt</div></pre></td></tr></table></figure><p>秒成功</p><p>但是打开 <strong>F:\Runtime\Python\Python27\Lib\site-packages\Qt</strong> 一看就一个<strong>init</strong>.py文件…</p><p>pip下载太慢，gpl包又懒得编译，直接去sourceforge下载exe，<a href="https://sourceforge.net/projects/pyqt/?source=typ_redirect" target="_blank" rel="external">地址</a>，下载完安装时发现时python3.5的…</p><p>不吐槽了，一番艰辛后找到了<a href="https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/" target="_blank" rel="external">下载地址</a>，为什么选pyqt4呢.. 当然是因为找不到python2的pyqt5安装程序。</p><p>一路next，修改为自己的python安装路径，一切OK。</p><h1 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h1><p>打开文件夹 <strong>F:\Runtime\Python\Python27\Lib\site-packages\PyQt4</strong> ，和自己的pyqt打声招呼吧。看到一堆包和模块，菜鸡先不管这些..</p><p>开始写一个小程序，参考<a href="http://www.qaulau.com/books/PyQt4_Tutorial/" target="_blank" rel="external">文章</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">from PyQt4 import QtGui</div><div class="line"></div><div class="line">app = QtGui.QApplication(sys.argv)</div><div class="line"></div><div class="line">widget = QtGui.QWidget()</div><div class="line">widget.resize(<span class="number">250</span>, <span class="number">150</span>)</div><div class="line">widget.setWindowTitle(<span class="string">'simple'</span>)</div><div class="line">widget.show()</div><div class="line"></div><div class="line">sys.<span class="keyword">exit</span>(app.exec_())</div></pre></td></tr></table></figure><p>成功显示一个窗口</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>打算着每学习一个新知识点都写点demo什么的，有时间把大一上写的C语言贪吃蛇，大一下写的中国象棋搬过来233</p><p>感冒貌似又重了，明天英语还有presentation，有时间再做吧，(事情总是一推再推~)，无奈.jpg</p><p>ps: 寒流来袭，小心感冒…</p>]]></content>
    
    <summary type="html">
    
      day1 pyqt的安装. 这是一篇吐槽文
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="python" scheme="https://blog.nightmare.xin/tags/python/"/>
    
      <category term="pyqt" scheme="https://blog.nightmare.xin/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>便捷的一键翻译功能</title>
    <link href="https://blog.nightmare.xin/translate.html"/>
    <id>https://blog.nightmare.xin/translate.html</id>
    <published>2017-10-29T09:19:49.000Z</published>
    <updated>2017-11-21T13:00:01.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>有时候英文阅读真的很烦，比如好不容易google了一篇很精彩的文章，当你看的兴起的时候，遇到一个生词，不管了跳过去吧，又遇到一个，于是老老实实的打开了谷歌翻译… 翻译完继续去阅读，灵感也差不多没了; 又或者是新安装了一款软件，官方文档是最好的入手教程，但教程一般都是英文的，大段大段的复制到谷歌翻译就会很烦而且显得很low; 就算是中文的博客，看到一个不懂的计算机词汇，有时候想把它查一下，但嫌麻烦，跳过去吧，这样就错过了积累的过程。 如果你遇到过上面的情况，那就继续读下去吧。</p><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>本篇用到的工具/语言是ahk和python</p><h2 id="关于ahk"><a href="#关于ahk" class="headerlink" title="关于ahk"></a>关于ahk</h2><p>即AutoHotkey，是一种便捷的自定义热键语言。<a href="http://blog.csdn.net/foxbryant/article/details/7628392" target="_blank" rel="external">ahk简单命令列表</a></p><h2 id="关于python"><a href="#关于python" class="headerlink" title="关于python"></a>关于python</h2><p>python是一种编程语言，以简洁高效著称，<strong>life is short, use python</strong>.</p><p>处理google翻译的过程中遇到tk参数问题，参考了gayhub上的一个项目<a href="https://github.com/Dayunxi/googleTranslate" target="_blank" rel="external">googleTranslate</a></p><p>这里我主要做了一些小小的修改，由于将剪切板的文本作为参数传入，就遇到了空格和换行符问题</p><p>了解过命令行传参规则的应该知道 空格 将一行命令分割成不同的参数，在Python中传入的参数argv是一个列表形式，<strong>argv=[‘filename’, ‘arg_1’, ‘arg_2’, […]]</strong> 所以我采用 <strong>source = ‘ ‘.join(sys.argv[1:])</strong> 获取到想要转化的文本字符串。</p><p><del>而在命令行下，换行符后的内容会被处理成下一条命令，我暂时没有合适的办法来处理。</del> 已修复</p><h1 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h1><p>鼠标左键选中之后按下 ctrl+/</p><p><img src="http://store.nightmare.xin/58d78da94cbf52033f7b8871e3190b43.png" alt=""></p><p><del>但是如果包含换行符则会被截断233</del></p><p><img src="http://store.nightmare.xin/fd1dc10102b5423681cc0b9987500313.png" alt=""></p><p>现在的地址: <a href="https://github.com/kur0mi/tools/tree/master/google_translate" target="_blank" rel="external"> google 翻译工具</a></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>ps: 最近天气转冷，夜跑有点痛苦orz</p>]]></content>
    
    <summary type="html">
    
      在计算机的学习中，英文阅读本来就是一大障碍，同时感觉对翻译工具的需求也越来越迫切，于是...
    
    </summary>
    
      <category term="Action" scheme="https://blog.nightmare.xin/categories/Action/"/>
    
    
      <category term="工具" scheme="https://blog.nightmare.xin/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ahk" scheme="https://blog.nightmare.xin/tags/ahk/"/>
    
      <category term="python" scheme="https://blog.nightmare.xin/tags/python/"/>
    
      <category term="翻译" scheme="https://blog.nightmare.xin/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>如何编写一个快捷的截图工具呢？</title>
    <link href="https://blog.nightmare.xin/test6.html"/>
    <id>https://blog.nightmare.xin/test6.html</id>
    <published>2017-10-24T13:26:35.000Z</published>
    <updated>2017-11-21T12:55:31.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>各种截图工具似乎都不太好用啊233，win的截取全屏/当前窗口都不太方便，无法截取任意位置，QQ截图用起来要好一些但图片则是默认保存在缓存，自己又不会改，那么…</p><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><p>怎么用脚本按自己的想法实现截屏功能呢？想啊想，大致需要这些：</p><ul><li><p>启动截图方便，想法是可以使用autohotkey脚本自定义热键，或者修改注册表将命令添加进右键菜单</p></li><li><p>合适的截屏API，这里我找到了python的ImageCrab模块，通过调用grab()实现截屏，想要截取任意位置就要读入起始坐标参数x, y</p></li><li><p>监控鼠标左键点击事件和左键弹起事件，记录光标的坐标，实现选中区域高亮度显示</p></li><li><p>截屏完毕之后，修改，保存什么的…</p></li></ul><h1 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h1><p>学习了python关于操控鼠标的一些API，信心满满的开始了第一步，先截取一个全屏图像试试，于是写下：<br><figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from PIL <span class="keyword">import</span> ImageGrab</div><div class="line"></div><div class="line"><span class="literal">im</span> = ImageGrab.grab()</div><div class="line"><span class="literal">im</span>.show()</div><div class="line"><span class="literal">im</span>.save('test.jpg')</div></pre></td></tr></table></figure></p><p>最后推荐一个看图软件 <strong>FastStone Image Viewer</strong>，不仅截图精确，还很方便修剪</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>好吧，这个故事结束了，这个截图太好用了233(都说了这篇文章是一个坑)</p>]]></content>
    
    <summary type="html">
    
      这篇文章是个坑
    
    </summary>
    
      <category term="Action" scheme="https://blog.nightmare.xin/categories/Action/"/>
    
    
      <category term="工具" scheme="https://blog.nightmare.xin/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="截图" scheme="https://blog.nightmare.xin/tags/%E6%88%AA%E5%9B%BE/"/>
    
      <category term="ahk" scheme="https://blog.nightmare.xin/tags/ahk/"/>
    
      <category term="python" scheme="https://blog.nightmare.xin/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="https://blog.nightmare.xin/test7.html"/>
    <id>https://blog.nightmare.xin/test7.html</id>
    <published>2017-10-24T13:10:50.000Z</published>
    <updated>2017-10-30T11:22:10.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>​ 第一章 总 则</p><p>​ 第二章 网络安全支持与促进</p><p>​ 第三章 网络运行安全</p><p>​ 第一节 一般规定</p><p>​ 第二节 关键信息基础设施的运行安全</p><p>​ 第四章 网络信息安全</p><p>​ 第五章 监测预警与应急处置</p><p>​ 第六章 法律责任</p><p>​ 第七章 附 则</p><p><strong>第一章 总 则</strong></p><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><p><strong>第二章 网络安全支持与促进</strong></p><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><p><strong>第三章 网络运行安全</strong></p><p>第一节 一般规定</p><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><p>第二节 关键信息基础设施的运行安全</p><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><p><strong>第四章 网络信息安全</strong></p><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><p><strong>第五章 监测预警与应急处置</strong></p><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><p><strong>第六章 法律责任</strong></p><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><p><strong>第七章 附 则</strong></p><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
    
    <summary type="html">
    
      2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过
    
    </summary>
    
      <category term="Rules" scheme="https://blog.nightmare.xin/categories/Rules/"/>
    
    
      <category term="法律法规" scheme="https://blog.nightmare.xin/tags/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>神奇的西操(1)</title>
    <link href="https://blog.nightmare.xin/test5.html"/>
    <id>https://blog.nightmare.xin/test5.html</id>
    <published>2017-10-23T13:56:59.000Z</published>
    <updated>2017-10-30T11:21:17.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>翻一翻以前的日记，大概从9.15开始的<br><img src="http://store.nightmare.xin/81448138f5f163ccdba4acc69819f280.png" alt=""><br>以前也试图坚持过，但总是很难坚持下来，这次一个月已经过去了，也算是小有成就吧。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>坚持锻炼不仅是体重减轻，肉肉减掉，强化身体防猝死，于我而言时刻提醒我去坚持梦想不放弃，还有最最最最重要的，晚上睡觉踏实多了(也许是我换了个枕头的缘故？)，远离修仙，从我做起。</p><p>ps: 听说瘦下来会变帅 Orz.</p>]]></content>
    
    <summary type="html">
    
      纪念坚持跑步一个月
    
    </summary>
    
      <category term="Life" scheme="https://blog.nightmare.xin/categories/Life/"/>
    
    
      <category term="锻炼" scheme="https://blog.nightmare.xin/tags/%E9%94%BB%E7%82%BC/"/>
    
  </entry>
  
  <entry>
    <title>记一次搭建博客全过程</title>
    <link href="https://blog.nightmare.xin/test4.html"/>
    <id>https://blog.nightmare.xin/test4.html</id>
    <published>2017-10-23T10:33:38.000Z</published>
    <updated>2017-10-30T11:20:38.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最初的悸动"><a href="#最初的悸动" class="headerlink" title="最初的悸动"></a>最初的悸动</h1><p>每个学计算机的都应该萌生过搭建个人网站或写博客的想法吧。其一当然是觉得建站很牛逼，写博客的都是大佬；其二这个过程对自己也是很不错的锻炼和成长。</p><p>这里插一个小故事，再次感慨一下程序员之间的鄙视链，后端鄙视前端，开发鄙视运维（此处略去几万字）。大一上学期，一次上课某老师对我们说，前端就是做做网站，没什么技术含量的啊，反正那老师对前端很是鄙视的样子。。</p><p>大一下学期接触了一些网络编程，恰逢阿里有活动，十几块钱送1核2G的服务器ecs实例一个+对象存储+各种数据库+负载均衡全家桶六个月+VIP版云解析一年和一个价值不错的万网域名代金券，于是我就拥有了一个ubuntu服务器和一个域名。C++课设写的网络双人对战版中国象棋v1.0就是用服务器做媒介(仅仅用来获取一方IP交给另一方然后双方建立socket连接，还是很渣的)来完成的。做完之后自信心很膨胀啊就想搭建个人网站了无非就是写一些html放在服务器上让其他人去访问嘛，管他搭建好之后做什么，先搭建起来玩玩。然后看了一些html教程，内容不难，但自己写就是不会…看网上什么五分钟急速建站教程，用wordpress搭建网站，弄完hello页面就没碰过了。</p><p>然后是学python，在codewars(一个刷题网站)把py级别刷到2kyu，听说可以用python实现个人网站，前端页面后端数据库手动一行一行写，听的是热血沸腾…于是本辣鸡的大一就这么过去了。</p><p>大二知识面广了一些后会经常搜索一些东西，会搜到一些写的很不错的博客，一开始是CSDN博客，后来是博客园，然后是简书，然后就是各种炫酷的个人博客了。然后是现在的CTF小队他们都有自己的博客@Primykq<a href="http://qrzbing.cn/" target="_blank" rel="external">链接</a>和@a-Lie-Z<a href="http://qrzbing.cn/" target="_blank" rel="external">链接</a>，主要是看了曾老师的超级炫酷的博客<a href="https://www.rexskz.info/" target="_blank" rel="external">链接</a>就又想搭一个了，这次就一次性搭建好了。</p><h1 id="搭建开始"><a href="#搭建开始" class="headerlink" title="搭建开始"></a>搭建开始</h1><p>我的个人博客使用的是hexo+github pages搭建，这个只需要按着教程一步一步走就好了，<a href="http://www.jianshu.com/p/ab21abc31153" target="_blank" rel="external">参考链接</a>。手上正巧还有一个(还有几个月过期)的域名，顺手在域名服务商做了CNAME解析到自己的github pages</p><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><p>网上有一些hexo美化的教程，但做出来的效果不太满意，有些高难度的操作起来又总是出错，干脆自己折腾吧。</p><p><img src="http://store.nightmare.xin/54324234.png" alt=""></p><p>选用了next主题，折腾了两天还是有点效果的。</p><p>基础的一些配置在hexo根目录下的_config.yml文件中，主题配置在themes/next/_config.yml中，一些个性化配置则需要修改主题目录下的source目录。</p><p>source目录下有css, fonts, images, js, lib五个文件夹，修改颜色背景标题栏大小挂件之类的样式需要去修改css，其他四个文件夹存储渲染页面需要用到的字体，图片，js特效和依赖文件。</p><p>我做的修改如下(均在css文件夹中)：</p><p>在_custom/custom.styl添加<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Custom styles.</span></div><div class="line"><span class="selector-tag">body</span> &#123; </div><div class="line">    <span class="attribute">background</span>: url(/images/GOQS6G4LH2Z1_1000x500.jpg);</div><div class="line">    <span class="attribute">background-size</span>: cover;</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">    <span class="attribute">background-attachment</span>: fixed;</div><div class="line">    <span class="attribute">background-position</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样就有了背景图。但是next的Pisces不支持文本半透明，导致图片大部分被遮住了，于是继续修改_schemes/Pisces文件夹。我基本是看到什么改什么，打开hexo s –debug本地调试，一点一点的改，里面碰到一些变量我找了好久找不到它在哪里，比如这样的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.content-wrap</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">padding</span>: $content-desktop-padding;</div><div class="line">  <span class="attribute">width</span>: $content-desktop;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">700px</span>;</div></pre></td></tr></table></figure></p><p>于是，，碰到这种变量不知道是什么值我又特别想改，，就直接改了，终于在我的不懈努力下改完了！</p><p>但是！！！最终在我打开variables文件夹后心态崩溃了，里面base.styl(基本样式)和Pisces.styl(Pisces特有的样式)存储了所有这些变量还附带了说明，我如同一个白痴晕晕乎乎瞎改了一遍，在那么一瞬间都想重装next了，想想毕竟是自己的成果，还是就这样吧，何必自己为难自己…</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本来想写成一篇技术博客的，不知不觉就成了流水账，一是菜二是懒，唉，就当成随笔吧。</p>]]></content>
    
    <summary type="html">
    
      今天我翻新了我的博客外观(没错，就是你们现在看到的这样子)，吃饱喝足之后，干脆和我搭建博客的过程一起记录一下吧
    
    </summary>
    
      <category term="Action" scheme="https://blog.nightmare.xin/categories/Action/"/>
    
    
      <category term="hexo" scheme="https://blog.nightmare.xin/tags/hexo/"/>
    
      <category term="博客" scheme="https://blog.nightmare.xin/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>快速获取markdown图片链接</title>
    <link href="https://blog.nightmare.xin/test3.html"/>
    <id>https://blog.nightmare.xin/test3.html</id>
    <published>2017-10-22T14:39:47.000Z</published>
    <updated>2017-11-21T12:59:10.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h1><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性，被称作“「电子邮件」风格的「标记语言」”。</p><p>markdown语法参考<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">链接</a></p><h1 id="七牛云简介"><a href="#七牛云简介" class="headerlink" title="七牛云简介"></a>七牛云简介</h1><p>这里主要使用七牛云作为图床————也就是互联网上的一处空间————来存储markdown需要的图片。</p><h1 id="autohotkey-python简介"><a href="#autohotkey-python简介" class="headerlink" title="autohotkey+python简介"></a>autohotkey+python简介</h1><p>autohotkey使用一种极为简便的语法来创建脚本自定义热键，python同样以简洁的语法和强大的功能著称，两者配合就可以使用热键快速的解决很多复杂问题。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>设置快捷键，实现一键<strong>上传图片到七牛云存储，并复制外链到剪切板</strong>，避免编写markdown文档时<strong>打开七牛云+上传图片+复制外链</strong>的繁杂操作。</p><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><p><a href="https://github.com/kur0mi/tools/tree/master/picture_upload_qiniu" target="_blank" rel="external">picture_upload</a></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>nothing…</p><p>ps: 第一次写这种博客，时间也有点匆忙，以后有时间再改改吧。</p>]]></content>
    
    <summary type="html">
    
      使用autohotkey自定义热键，并通过利用python脚本强大的处理能力，实现一键处理功能
    
    </summary>
    
      <category term="Action" scheme="https://blog.nightmare.xin/categories/Action/"/>
    
    
      <category term="markdown" scheme="https://blog.nightmare.xin/tags/markdown/"/>
    
      <category term="图床" scheme="https://blog.nightmare.xin/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="七牛云" scheme="https://blog.nightmare.xin/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="工具" scheme="https://blog.nightmare.xin/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2017年南航CTF校赛</title>
    <link href="https://blog.nightmare.xin/test2.html"/>
    <id>https://blog.nightmare.xin/test2.html</id>
    <published>2017-10-22T02:46:26.000Z</published>
    <updated>2017-10-30T11:19:50.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF校赛"><a href="#CTF校赛" class="headerlink" title="CTF校赛"></a>CTF校赛</h1><p>本来想趁着学校大佬们都去打天翼杯，然后校赛混个奖什么的，然而，哈哈没有然而，确实被我们混到了，排名第四，校内队伍第二。 作为第一次参加这种 <strong>比较</strong> 正式的比赛也是一个好的开始。</p><p>最出乎意料的是，这次比赛比预想中难了好多好多好多。差点心态就炸了，不过还好队友们相互鼓励还是坚持了下来。</p><p>现在将这次比赛过程记录如下：</p><h2 id="MISC1-–"><a href="#MISC1-–" class="headerlink" title="MISC1 ++–"></a>MISC1 ++–</h2><p>看到问题立马想到了BrainFuck，然而打开一看却是各种颜文字…</p><p>参考文章: <a href="https://qing.su/article/119.html，" target="_blank" rel="external">https://qing.su/article/119.html，</a></p><p>注意到BrainFuck的结构，观察前部结构：</p><p>‘<strong>( ͡° ͜ʖ ͡°)</strong>‘由’<strong>+</strong>‘替代;</p><p>‘<strong>( ͡°(</strong>‘由’<strong>[</strong>‘替代，对应地，’<strong>) ͡°)</strong>‘由’<strong>]</strong>‘替代;</p><p>‘<strong>ᕦ( ͡°ヮ ͡°)ᕥ</strong>‘由’<strong>&gt;</strong>‘替代。</p><p>之后观察后面的结构：</p><p>‘<strong>(&gt; ͜ʖ(∩ ͡° ͜ʖ ͡°)⊃━☆ﾟ.*)</strong>‘由’<strong>.</strong>‘替代;</p><p>‘<strong>(♥ ͜ʖ♥)</strong>‘由’<strong>-</strong>‘替代;</p><p>‘<strong>(∩ ͡° ͜ʖ ͡°)⊃━☆ﾟ.*</strong>‘由’<strong>&lt;</strong>‘替代。</p><p>至此，我们可以得到正确的BrainFuck表达式</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></div><div class="line"><span class="title">[</span>&gt;<span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span></div><div class="line">&gt;&gt;&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line">&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line">&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line">&lt;<span class="string">.</span></div><div class="line">&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="string">.</span></div><div class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></div></pre></td></tr></table></figure><p>在网站: <a href="https://sange.fi/esoteric/brainfuck/impl/interp/i.html" target="_blank" rel="external">https://sange.fi/esoteric/brainfuck/impl/interp/i.html</a> 上解密，得到flag</p><p><img src="http://oxhwf4emp.bkt.clouddn.com/NUAACTF_Brainfuck.png" alt=""></p><h2 id="MISC3-recover"><a href="#MISC3-recover" class="headerlink" title="MISC3 recover"></a>MISC3 recover</h2><p>（吐槽一下，在chrome输flag，没有选中的话是看不见的。。。）</p><p>下载后发现是个png图片，但打不开</p><p>第一反应是去改文件头，还是选择先strings一下</p><p>然后就有了点惊喜</p><p><img src="https://ws1.sinaimg.cn/large/006OSALLgy1fkq1rmhz6ej30sn03bq2v.jpg" alt=""></p><p>瞄了一眼已解决列表，卧槽，已经7个队伍了，论抢一血的重要性哇</p><p>话说300分是不是多了点。。。。。。</p><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><p>因为每道题的一血(第一个做出来的)有额外加分嘛，然后就准备抢一血。 刷新网页，点开sign-in题，右键源码，找到flag，提交，失败…而且输入框也有问题，不能显示。 然后过了几分钟，应该是被主办方修好了，我们运气不错拿到了一血。</p><h2 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h2><p>题目是sign-up，点开题目地址，主要有<strong>注册</strong>，<strong>登录</strong>，<strong>注销</strong>三个功能。试了一下随便注册一个账号都可以登录。一时没有其他思路就用awvs扫了一下，扫出来一个index.php.bak和scehma.sql文件，基本确定应该是属于源码泄露的题。然后对着源码开始审计，发现需要修改一个字段，试着用 <strong>me’ union select 1#</strong> 注入失败，一直到比赛结束都没做出来… 感觉这里应该是有过滤。</p><h2 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h2><p><img src="http://oxm4hc2s3.bkt.clouddn.com/3.png" alt=""></p><p>题目循环检测alert并删除，试了各种编码无效，去做web300的时候才想到jsfuck编码，可以绕过检测并且由js解析。</p><p>当然要先闭合前边的引号，后边可以闭合或直接注释掉。</p><h2 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h2><p>这道题就是真的坑了，参数 <strong>?file=flag</strong> 没有显示任何内容，试着%00截断返回错误信息，包括文件包含路径<strong>include_path=’/usr/local/php’</strong>和当前路径<strong>/app/xxx/index.php</strong>。</p><p>然后当我输入绝对路径就会显示</p><blockquote><p>you want to search with root path, huh?</p></blockquote><p>输入相对路径就显示</p><blockquote><p>you want to search with apparent path, huh?</p></blockquote><p>那个 <strong>huh</strong> 真是巨嘲讽，各种尝试都失败了，最后也没做出来，赛后才知道只需要用 <strong>php://filter/read=convert.base64-encode/resource=flag</strong> 就可以了，，我记得我当时这样试过，但貌似哪里出错了就放弃了。还是经验不够。</p><h2 id="web300"><a href="#web300" class="headerlink" title="web300"></a>web300</h2><p>这就是这次比赛最开心的一道题了，进去之后发现正则匹配对输入进行了过滤，’[^[]!+]+/g’，也就是说只能使用 <strong>[]!+</strong> 四个字符进行构造，eval(input)可以对input进行js解析，综合题意，只要可以使用eval(input)构造出’alert’字符串即可。</p><p>一开始当然直接jsfuck，然后由于 <strong>()</strong> 被过滤掉了就fail了。然后各种困惑，各种google之后，get到jsfuck的编码方式，就解开了本题。记录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">以下内容基于</div><div class="line">[]      =&gt;  []</div><div class="line"></div><div class="line">然后!可以将类型转化为布尔型</div><div class="line">![]     =&gt;  false</div><div class="line">!![]    =&gt;  true</div><div class="line"></div><div class="line">+可以将类型转化为整形</div><div class="line">+![]    =&gt;  0</div><div class="line">+!![]   =&gt;  1</div><div class="line">!![]+!![]   =&gt;  2 </div><div class="line"></div><div class="line">然后+[]可以转化为字符串</div><div class="line">![]+[]  =&gt;  &apos;false&apos;</div><div class="line"></div><div class="line">类似于数组取下标</div><div class="line">(![]+[])[+!![]] =&gt;  &apos;a&apos;</div><div class="line"></div><div class="line">然后就可以类似的从&apos;false&apos;, &apos;true&apos;中读出&apos;a&apos;,&apos;l&apos;,&apos;e&apos;,&apos;r&apos;,&apos;t&apos;。</div><div class="line"></div><div class="line">em...但是...题目过滤了小括号。需要绕一下</div><div class="line">![]+[]  =&gt;  &apos;false&apos;</div><div class="line">[![]+[]]    =&gt;  [&apos;false&apos;]</div><div class="line">[![]+[]][+[]]    =&gt;  &apos;false&apos;</div><div class="line">[![]+[]][+[]][+!![]]    =&gt;  &apos;a&apos;</div><div class="line"></div><div class="line">最后用加号拼起来即可。</div><div class="line">这题最后一半靠蒙，\笑哭\笑哭</div></pre></td></tr></table></figure><p>截图如下：<br><img src="http://oxm4hc2s3.bkt.clouddn.com/4.png" alt=""></p><p><img src="http://oxm4hc2s3.bkt.clouddn.com/2.png" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>开心，也有点小遗憾吧，路还很长啊。</p>]]></content>
    
    <summary type="html">
    
      趁着学校大佬们都去打天翼杯，然后校赛混了个第四名
    
    </summary>
    
      <category term="CTF" scheme="https://blog.nightmare.xin/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://blog.nightmare.xin/tags/CTF/"/>
    
      <category term="比赛" scheme="https://blog.nightmare.xin/tags/%E6%AF%94%E8%B5%9B/"/>
    
      <category term="南航" scheme="https://blog.nightmare.xin/tags/%E5%8D%97%E8%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>第四届世安杯比赛</title>
    <link href="https://blog.nightmare.xin/test.html"/>
    <id>https://blog.nightmare.xin/test.html</id>
    <published>2017-10-21T01:43:47.000Z</published>
    <updated>2017-10-30T11:19:25.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四届世安杯划水日记"><a href="#第四届世安杯划水日记" class="headerlink" title="第四届世安杯划水日记"></a>第四届世安杯划水日记</h1><p>两位队友的文章 @a-lie-Z<a href="http://qrzbing.cn/2017/CTF_WriteUp171008.html#more" target="_blank" rel="external">链接地址</a> 和 @primykq<a href="https://primykq.top/2017/10/08/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E4%B8%96%E5%AE%89%E6%9D%AF%E9%85%B1%E6%B2%B9%E8%AE%B0/" target="_blank" rel="external">链接地址</a></p><h2 id="ctf入门级题目"><a href="#ctf入门级题目" class="headerlink" title="ctf入门级题目"></a>ctf入门级题目</h2><p>ereg传入数组时不会返回FALSE，strpos传入数组也不会反回FALSE…</p><p>此外ereg还可以使用%00截断</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>php代码审计的题，很喜欢</p><p>对于x1，注意到case 0后边没有break，直接传入<strong>x1=0</strong>即可</p><p>对于x2，构造json字符串。其中x21不能为数字且x21&gt;”2017”，传入<strong>x21=2018a</strong>。x22出题点应该是array_search是弱比较，只需要有一个键为0，就可以绕过。</p><p>对于x3，直接md5碰撞，脚本大概长这样…<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php">$a = <span class="string">'1'</span>;</span></div><div class="line"><span class="php">$s = <span class="string">'XIPU'</span>;</span></div><div class="line"><span class="php"><span class="keyword">while</span>(<span class="number">1</span>)</span></div><div class="line"><span class="php">&#123;</span></div><div class="line"><span class="php">    $x3 = $s + $a;</span></div><div class="line"><span class="php">    substr(md5($x3),<span class="number">8</span>,<span class="number">16</span>) == substr(md5(<span class="string">'15562'</span>),<span class="number">8</span>,<span class="number">16</span>)?<span class="keyword">die</span>($x3):$a++;</span></div><div class="line"><span class="php">&#125;</span></div><div class="line"><span class="php"><span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>右键查看源码发现提示，密码为五位数字，想到爆破。看一下验证码，猜想应该是第一次请求会生成vcode并保存在session，后面每一次请求与保存的vcode比对并生成新的vcode。所以写脚本每次请求需要带入phpsessid（一开始没注意导致一直抓不到验证vcode的页面，还以为出bug了…）</p><p>基于此，写python脚本爆破，这里又踩了一个坑，没错，我是从10000开始爆破的，五位数字…只想说人生经验还不够丰富</p><p>好像burp可以用intruder模块直接爆破，有一个选项是可以使用返回的页面作为下一次请求的参数，很适合这个题。</p><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>php://input伪协议+未处理的post数据绕过第一层，然后利用include+php://filter/read=convert.base64-encode/class.php读源码，这里很好奇无法读取flag.php。</p><p>先读取index.php发现对$file参数做了过滤.构造序列化字符串（其中需要给一个变量赋值），然后程序执行echo调用_toString，就可以getflag。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>然后就…没有了。 </p><p>不说了，虽然菜，但还是玩的很开心的。</p><p>ps: 希望下午校赛可以取得好成绩</p>]]></content>
    
    <summary type="html">
    
      本来没写的，看到两位队友都写了，就顺手记录一下吧，整理在一起做个纪念
    
    </summary>
    
      <category term="CTF" scheme="https://blog.nightmare.xin/categories/CTF/"/>
    
    
      <category term="世安杯" scheme="https://blog.nightmare.xin/tags/%E4%B8%96%E5%AE%89%E6%9D%AF/"/>
    
      <category term="CTF" scheme="https://blog.nightmare.xin/tags/CTF/"/>
    
      <category term="比赛" scheme="https://blog.nightmare.xin/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
</feed>
