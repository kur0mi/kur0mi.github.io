<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kur0mi&#39;s blog</title>
  
  <subtitle>faith and brave</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.nightmare.xin/"/>
  <updated>2018-03-08T06:00:16.719Z</updated>
  <id>https://blog.nightmare.xin/</id>
  
  <author>
    <name>kur0mi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PA - 一些坑</title>
    <link href="https://blog.nightmare.xin/PA-questions.html"/>
    <id>https://blog.nightmare.xin/PA-questions.html</id>
    <published>2018-03-08T05:44:34.000Z</published>
    <updated>2018-03-08T06:00:16.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6A-push-Ib"><a href="#6A-push-Ib" class="headerlink" title="6A: push Ib"></a>6A: push Ib</h2><p>问题首先发现是在这里 tests/add.c</p><p><img src="http://store.nightmare.xin/8fed1493aadb125b2bfce8281dbb886f.png" alt=""></p><p>main 中循环判断 add 的结果是否正确。</p><p>关键汇编代码如下</p><p><img src="http://store.nightmare.xin/d00409d09a259573be913a94e8d2ba31.png" alt=""></p><p>ebx 记录循环次数，每次减一，减到0结束循环，问题的关键出在这里边。通过手动修改，我发现循环次数大于4就会出问题，报很奇怪的错误。</p><p>通过手动查看代码发现问题</p><p><img src="http://store.nightmare.xin/e567ba9ca5f43fa0a2cea583a805576c.jpg" alt=""></p><p>em… 6a 01 在opcode table解释为 push Ib，这给人一种误解，是push一个字节，然后我上网搜索不能push一个字节，需要对单字节扩展。</p><p>所以处理 push Ib 的时候对单字节操作数进行符号扩展就好了。</p>]]></content>
    
    <summary type="html">
    
      PA 中遇到过的神坑，必看。调几天都调不出来的那种。正所谓，千行代码两茫茫，bug何处藏...
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 一些坑</title>
    <link href="https://blog.nightmare.xin/slash/PA-questions.html"/>
    <id>https://blog.nightmare.xin/slash/PA-questions.html</id>
    <published>2018-03-08T05:44:34.000Z</published>
    <updated>2018-03-08T06:00:16.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6A-push-Ib"><a href="#6A-push-Ib" class="headerlink" title="6A: push Ib"></a>6A: push Ib</h2><p>问题首先发现是在这里 tests/add.c</p><p><img src="http://store.nightmare.xin/8fed1493aadb125b2bfce8281dbb886f.png" alt=""></p><p>main 中循环判断 add 的结果是否正确。</p><p>关键汇编代码如下</p><p><img src="http://store.nightmare.xin/d00409d09a259573be913a94e8d2ba31.png" alt=""></p><p>ebx 记录循环次数，每次减一，减到0结束循环，问题的关键出在这里边。通过手动修改，我发现循环次数大于4就会出问题，报很奇怪的错误。</p><p>通过手动查看代码发现问题</p><p><img src="http://store.nightmare.xin/e567ba9ca5f43fa0a2cea583a805576c.jpg" alt=""></p><p>em… 6a 01 在opcode table解释为 push Ib，这给人一种误解，是push一个字节，然后我上网搜索不能push一个字节，需要对单字节扩展。</p><p>所以处理 push Ib 的时候对单字节操作数进行符号扩展就好了。</p>]]></content>
    
    <summary type="html">
    
      PA 中遇到过的神坑，必看。调几天都调不出来的那种。正所谓，千行代码两茫茫，bug何处藏...
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 杂项</title>
    <link href="https://blog.nightmare.xin/PA-coffee.html"/>
    <id>https://blog.nightmare.xin/PA-coffee.html</id>
    <published>2018-03-03T13:12:40.000Z</published>
    <updated>2018-03-03T13:56:02.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高亮显示文本"><a href="#高亮显示文本" class="headerlink" title="高亮显示文本"></a>高亮显示文本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    black = <span class="number">30</span>, red, green, yellow, blue,</div><div class="line">    purple, darkgreen, white</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> kurumi(back, front, format, ...) \</span></div><div class="line">  <span class="keyword">do</span> &#123; \</div><div class="line">      fflush(<span class="built_in">stdout</span>); \</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"\x1b[%d;%dm"</span>, back+<span class="number">10</span>, front); \</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, format, ## __VA_ARGS__); \</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"\x1b[0m"</span>); \</div><div class="line">  &#125; <span class="keyword">while</span> (<span class="number">0</span>)</div></pre></td></tr></table></figure><p>调用方式： kurumi(背景色, 前景色, 格式字符串, 参数表列);</p><p>也可以进一步封装。</p><p>参考文章: <a href="http://blog.csdn.net/feixiaku/article/details/39639553" target="_blank" rel="external">C/C++控制台带颜色功能输出</a></p><h2 id="vim-列编辑模式"><a href="#vim-列编辑模式" class="headerlink" title="vim 列编辑模式"></a>vim 列编辑模式</h2><p>按下 ctrl-v，上下移动可以看到选中的列，此时就可以对它们同时进行编辑</p><ol><li>按下 I（大写 i），在选中内容之前插入</li><li>按下 A，在选中内容之后插入</li><li>按下 d，删除选中内容</li><li>其他快捷键</li></ol><h2 id="vim-批量修改替换-字符串"><a href="#vim-批量修改替换-字符串" class="headerlink" title="vim 批量修改替换 字符串"></a>vim 批量修改替换 字符串</h2><p>:s/XXX/YYY 将当前行的XXX修改为YYY（仅修改第一个XXX）<br>:s/XXX/YYY/g 将当前行的XXX修改为YYY（全部）<br>:3,5s/XXX/YYY/g 修改从第3行到第5行</p><p>先用 V 模式选中块区域，然后按 :（冒号）可以快速对选中内容进行替换<br>:’&lt;,’&gt;s/XXX/YYY/g</p><h2 id="C代码格式化"><a href="#C代码格式化" class="headerlink" title="C代码格式化"></a>C代码格式化</h2><p>按unix内核的格式格式化，还需要修改indent的配置文件，具体在哪忘了。。</p><p>附带一些格式化之后的更正和备份文件的删除</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `find . -<span class="built_in">type</span> f -name <span class="string">"*.[ch]"</span>`</div><div class="line"><span class="keyword">do</span></div><div class="line">indent <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/2 byte_esc/2byte_esc/g'</span> <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/0 b/0b/g'</span> <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/- &gt;/-&gt;/g'</span> <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/retrun/return/g'</span> <span class="variable">$file</span></div><div class="line"><span class="keyword">done</span></div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.orig"</span> | xargs rm</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*~"</span> | xargs rm</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.swp"</span> | xargs rm</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.swo"</span> | xargs rm</div></pre></td></tr></table></figure><h2 id="符号位扩展-和-零扩展"><a href="#符号位扩展-和-零扩展" class="headerlink" title="符号位扩展 和 零扩展"></a>符号位扩展 和 零扩展</h2><p>参与运算的两个数位数不一致时，就需要对其中一个数进行数位扩展</p><p>符号位扩展： 若符号位是1，则高位全部扩展为1；若符号位是0，高位全部扩展为0。</p><p>至于零扩展，无论如何，高位都扩展为0。</p><p>当你想要参与运算的是一个有符号数时，就进行符号扩展；当你想要进行无符号数运算时，就进行零扩展。</p><p>简单来说，也就是计算时心里要有B数。</p>]]></content>
    
    <summary type="html">
    
      一些乱七八糟的东西
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 杂项</title>
    <link href="https://blog.nightmare.xin/slash/PA-coffee.html"/>
    <id>https://blog.nightmare.xin/slash/PA-coffee.html</id>
    <published>2018-03-03T13:12:40.000Z</published>
    <updated>2018-03-03T13:56:02.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高亮显示文本"><a href="#高亮显示文本" class="headerlink" title="高亮显示文本"></a>高亮显示文本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    black = <span class="number">30</span>, red, green, yellow, blue,</div><div class="line">    purple, darkgreen, white</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> kurumi(back, front, format, ...) \</span></div><div class="line">  <span class="keyword">do</span> &#123; \</div><div class="line">      fflush(<span class="built_in">stdout</span>); \</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"\x1b[%d;%dm"</span>, back+<span class="number">10</span>, front); \</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, format, ## __VA_ARGS__); \</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"\x1b[0m"</span>); \</div><div class="line">  &#125; <span class="keyword">while</span> (<span class="number">0</span>)</div></pre></td></tr></table></figure><p>调用方式： kurumi(背景色, 前景色, 格式字符串, 参数表列);</p><p>也可以进一步封装。</p><p>参考文章: <a href="http://blog.csdn.net/feixiaku/article/details/39639553" target="_blank" rel="external">C/C++控制台带颜色功能输出</a></p><h2 id="vim-列编辑模式"><a href="#vim-列编辑模式" class="headerlink" title="vim 列编辑模式"></a>vim 列编辑模式</h2><p>按下 ctrl-v，上下移动可以看到选中的列，此时就可以对它们同时进行编辑</p><ol><li>按下 I（大写 i），在选中内容之前插入</li><li>按下 A，在选中内容之后插入</li><li>按下 d，删除选中内容</li><li>其他快捷键</li></ol><h2 id="vim-批量修改替换-字符串"><a href="#vim-批量修改替换-字符串" class="headerlink" title="vim 批量修改替换 字符串"></a>vim 批量修改替换 字符串</h2><p>:s/XXX/YYY 将当前行的XXX修改为YYY（仅修改第一个XXX）<br>:s/XXX/YYY/g 将当前行的XXX修改为YYY（全部）<br>:3,5s/XXX/YYY/g 修改从第3行到第5行</p><p>先用 V 模式选中块区域，然后按 :（冒号）可以快速对选中内容进行替换<br>:’&lt;,’&gt;s/XXX/YYY/g</p><h2 id="C代码格式化"><a href="#C代码格式化" class="headerlink" title="C代码格式化"></a>C代码格式化</h2><p>按unix内核的格式格式化，还需要修改indent的配置文件，具体在哪忘了。。</p><p>附带一些格式化之后的更正和备份文件的删除</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `find . -<span class="built_in">type</span> f -name <span class="string">"*.[ch]"</span>`</div><div class="line"><span class="keyword">do</span></div><div class="line">indent <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/2 byte_esc/2byte_esc/g'</span> <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/0 b/0b/g'</span> <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/- &gt;/-&gt;/g'</span> <span class="variable">$file</span></div><div class="line">sed -i <span class="string">'s/retrun/return/g'</span> <span class="variable">$file</span></div><div class="line"><span class="keyword">done</span></div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.orig"</span> | xargs rm</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*~"</span> | xargs rm</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.swp"</span> | xargs rm</div><div class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.swo"</span> | xargs rm</div></pre></td></tr></table></figure><h2 id="符号位扩展-和-零扩展"><a href="#符号位扩展-和-零扩展" class="headerlink" title="符号位扩展 和 零扩展"></a>符号位扩展 和 零扩展</h2><p>参与运算的两个数位数不一致时，就需要对其中一个数进行数位扩展</p><p>符号位扩展： 若符号位是1，则高位全部扩展为1；若符号位是0，高位全部扩展为0。</p><p>至于零扩展，无论如何，高位都扩展为0。</p><p>当你想要参与运算的是一个有符号数时，就进行符号扩展；当你想要进行无符号数运算时，就进行零扩展。</p><p>简单来说，也就是计算时心里要有B数。</p>]]></content>
    
    <summary type="html">
    
      一些乱七八糟的东西
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 标志位相关</title>
    <link href="https://blog.nightmare.xin/slash/PA-eflags.html"/>
    <id>https://blog.nightmare.xin/slash/PA-eflags.html</id>
    <published>2018-03-02T04:47:23.000Z</published>
    <updated>2018-03-02T06:12:59.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>什么是标志位？</p></blockquote><p>x86架构的CPU中有32位的标志寄存器（eflags），在PA中只关心其中的五个 : ZF（零标志位），SF（符号标志位），OF（溢出标志位），CF（进位标志位），IF（中断标志位）。</p><blockquote><p>ZF 和 SF</p></blockquote><p>ZF（zero flag）用于指示计算结果是否是 0。</p><p>SF（sign flag）用于指示计算结果的符号位，显然，我们应将计算结果看做有符号数。</p><blockquote><p>原码，补码和反码</p></blockquote><p>正数  1 0001（原码） 0001（反码） 0001（补码）</p><p>负数 -1 1001（原码） 1110（反码） 1111（补码）</p><blockquote><p>有符号数和无符号数</p></blockquote><p>在计算中没有所谓的符号之分，计算机中存储数值用补码来表示，比如四位加法 ：1000b + 0001b = 1001b，如果看成无符号数为 8+1=9，如果看成有符号数则是 -8+1=-7，计算机只是简单的将补码按位相加。</p><p>但是由于计算机只能存储四位（假设），这样并不能保证计算结果总是正确的。</p><blockquote><p>OF 和 CF</p></blockquote><p>OF（overflow flag）指示无符号数的运算结果是否产生溢出。比如 1111b + 1111b = 1110b，即 15+15=14，显然高位被丢弃导致溢出而使得计算结果不准确。此时OF标志位置1。</p><p>CF（carry flag）指示有符号数的运算结果是否产生进位或借位。比如 0111b + 0111b = 1110b，即 7+7=-2，这是由于产生进位使得计算结果不准确。此时CF标志位置1。</p><blockquote><p>溢出和进位（借位）的区别</p></blockquote><p>溢出表示无符号数的运算超出范围（0~15），进位（借位）表示有符号数的运算超出范围（-8~7）。</p><p>溢出不一定产生进位（借位），比如上面的 1111b + 1111b = 1110b 产生了溢出，但看做有符号数运算时 -1+-1=-2 计算结果是准确的，并没有进位。</p><p>同理，0111b + 0111b = 1110b 虽然产生了进位，但是若看做无符号数 7+7=14，并没有超出范围，结果准确，没有溢出。</p><blockquote><p>SF 和 ZF 判断方法</p></blockquote><p>SF只需判断运算结果的最高有效位</p><p>ZF只需判断运算结果是否为0</p><blockquote><p>对于加法指令 add : res = dest + src</p></blockquote><p>若 res &lt; dest 则 溢出</p><p>若 dest 与 src 同号，res 变号则 进位</p><p>特别的，对于 带进位加法 adc : res = dest + src + carry，分两次加法判断即可，只要其中有一次溢出（进位|借位），那么结果就溢出（进位|借位）。</p><blockquote><p>对于减法 sub : res = dest - src</p></blockquote><p>若 dest &lt; src 则 溢出</p><p>若 dest 与 src 符号相反，res 与 src 同号则 进位（将减法考虑为加法）</p><p>特别的对于 sbb : res = dest - src - carry，方法同上。</p><pre><code>未完待续...</code></pre>]]></content>
    
    <summary type="html">
    
      PA 中标志位的判断方法总结
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 标志位相关</title>
    <link href="https://blog.nightmare.xin/PA-eflags.html"/>
    <id>https://blog.nightmare.xin/PA-eflags.html</id>
    <published>2018-03-02T04:47:23.000Z</published>
    <updated>2018-03-02T06:12:59.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>什么是标志位？</p></blockquote><p>x86架构的CPU中有32位的标志寄存器（eflags），在PA中只关心其中的五个 : ZF（零标志位），SF（符号标志位），OF（溢出标志位），CF（进位标志位），IF（中断标志位）。</p><blockquote><p>ZF 和 SF</p></blockquote><p>ZF（zero flag）用于指示计算结果是否是 0。</p><p>SF（sign flag）用于指示计算结果的符号位，显然，我们应将计算结果看做有符号数。</p><blockquote><p>原码，补码和反码</p></blockquote><p>正数  1 0001（原码） 0001（反码） 0001（补码）</p><p>负数 -1 1001（原码） 1110（反码） 1111（补码）</p><blockquote><p>有符号数和无符号数</p></blockquote><p>在计算中没有所谓的符号之分，计算机中存储数值用补码来表示，比如四位加法 ：1000b + 0001b = 1001b，如果看成无符号数为 8+1=9，如果看成有符号数则是 -8+1=-7，计算机只是简单的将补码按位相加。</p><p>但是由于计算机只能存储四位（假设），这样并不能保证计算结果总是正确的。</p><blockquote><p>OF 和 CF</p></blockquote><p>OF（overflow flag）指示无符号数的运算结果是否产生溢出。比如 1111b + 1111b = 1110b，即 15+15=14，显然高位被丢弃导致溢出而使得计算结果不准确。此时OF标志位置1。</p><p>CF（carry flag）指示有符号数的运算结果是否产生进位或借位。比如 0111b + 0111b = 1110b，即 7+7=-2，这是由于产生进位使得计算结果不准确。此时CF标志位置1。</p><blockquote><p>溢出和进位（借位）的区别</p></blockquote><p>溢出表示无符号数的运算超出范围（0~15），进位（借位）表示有符号数的运算超出范围（-8~7）。</p><p>溢出不一定产生进位（借位），比如上面的 1111b + 1111b = 1110b 产生了溢出，但看做有符号数运算时 -1+-1=-2 计算结果是准确的，并没有进位。</p><p>同理，0111b + 0111b = 1110b 虽然产生了进位，但是若看做无符号数 7+7=14，并没有超出范围，结果准确，没有溢出。</p><blockquote><p>SF 和 ZF 判断方法</p></blockquote><p>SF只需判断运算结果的最高有效位</p><p>ZF只需判断运算结果是否为0</p><blockquote><p>对于加法指令 add : res = dest + src</p></blockquote><p>若 res &lt; dest 则 溢出</p><p>若 dest 与 src 同号，res 变号则 进位</p><p>特别的，对于 带进位加法 adc : res = dest + src + carry，分两次加法判断即可，只要其中有一次溢出（进位|借位），那么结果就溢出（进位|借位）。</p><blockquote><p>对于减法 sub : res = dest - src</p></blockquote><p>若 dest &lt; src 则 溢出</p><p>若 dest 与 src 符号相反，res 与 src 同号则 进位（将减法考虑为加法）</p><p>特别的对于 sbb : res = dest - src - carry，方法同上。</p><pre><code>未完待续...</code></pre>]]></content>
    
    <summary type="html">
    
      PA 中标志位的判断方法总结
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 接口相关</title>
    <link href="https://blog.nightmare.xin/PA-interface.html"/>
    <id>https://blog.nightmare.xin/PA-interface.html</id>
    <published>2018-02-19T09:05:11.000Z</published>
    <updated>2018-03-02T07:02:31.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口函数"><a href="#接口函数" class="headerlink" title="接口函数"></a>接口函数</h2><blockquote><p>PA 中有许多接口函数，可以供我们直接调用，特别方便，但是得先了解各个参数和功能，现在把它们总结在这里，方便以后查阅</p></blockquote><pre><code>以下将guest客户地址写做虚拟地址，将host地址写做实际地址。</code></pre><blockquote><p>地址转换</p></blockquote><ol><li><p>guest_to_host(p)</p><p> 将一个 uint32_t 类型的虚拟地址转换为 void * 的实际地址</p></li><li><p>host_to_guest(p)</p><p> 与上一个相反</p></li></ol><blockquote><p>I/O 相关</p></blockquote><ol><li><p>uint32_t vaddr_read(vaddr_t, int);</p><p> 从虚拟地址 vaddr_t 出读取 int 字节的数据，最多为四个字节。</p></li><li><p>uint32_t paddr_read(paddr_t, int);</p><p> 和上一个没什么区别。。可能以后会改吧。</p></li><li><p>void vaddr_write(vaddr_t, int, uint32_t);</p><p> 将 int 字节的数据 uint32_t 写入虚拟地址 vaddr_t，</p></li><li><p>void paddr_write(paddr_t, int, uint32_t);</p><p> 同上。。</p></li></ol><blockquote><p>ModRM 相关</p></blockquote><ol><li><p>void operand_write(Operand <em>, rtlreg_t </em>);</p><p> 将右边指针指向的数据 写入 左边的操作数（reg or mem）</p></li></ol><blockquote><p>译码相关</p></blockquote><ol><li><p>make_DHelper(XXX);</p><p> 宏展开：decode_xxx 函数</p></li><li><p>make_EHelper(XXX);</p><p> 宏展开：exec_xxx 函数</p></li><li><p>make_DopHelper(XXX);</p><p> 宏展开：decode_op_xxx 函数</p></li></ol><blockquote><p>前缀</p></blockquote><ol><li><p>make_EHelper(operand_size);</p><p> 操作数前缀，转为 16 位操作数</p></li><li><p>static make_EHelper(2byte_esc);</p><p> 双字节指令前缀</p></li></ol><blockquote><p>杂项</p></blockquote><ol><li><p>make_group(name, …);</p><p> group 类型，需要进一步解析 ModRM 的 reg/opcode 字节 来确定真正的指令</p></li><li><p>make_EHelper(real);</p><p> 读取操作码，操作码写入 decoding.opcode，操作数宽度写入 src(dest, src1).width，然后执行 opcode_table 中的 译码函数 和 解码函数</p></li><li><p>IDEXW(id, ex, w);</p><p> 将要用到的，译码函数 decode_id， 执行函数 exec_ex，操作数宽度 w</p></li><li><p>idex(vaddr_t <em> eip, opcode_entry </em> e);</p><p> 解码（instr decode）和执行（execute）</p></li></ol><hr><hr><hr><hr><hr><hr><hr><hr><p>i386 手册: <a href="http://www.logix.cz/michal/doc/i386/" target="_blank" rel="external">地址</a></p><p>参考手册: <a href="http://www.fermimn.gov.it/linux/quarta/x86/index.htm" target="_blank" rel="external">地址</a></p><p>推荐通过附录A中的 opcode_map 和 opcode_table 了解指令</p>]]></content>
    
    <summary type="html">
    
      介绍 PA 中一些好用的接口函数
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>PA - 接口相关</title>
    <link href="https://blog.nightmare.xin/slash/PA-interface.html"/>
    <id>https://blog.nightmare.xin/slash/PA-interface.html</id>
    <published>2018-02-19T09:05:11.000Z</published>
    <updated>2018-03-02T07:02:31.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口函数"><a href="#接口函数" class="headerlink" title="接口函数"></a>接口函数</h2><blockquote><p>PA 中有许多接口函数，可以供我们直接调用，特别方便，但是得先了解各个参数和功能，现在把它们总结在这里，方便以后查阅</p></blockquote><pre><code>以下将guest客户地址写做虚拟地址，将host地址写做实际地址。</code></pre><blockquote><p>地址转换</p></blockquote><ol><li><p>guest_to_host(p)</p><p> 将一个 uint32_t 类型的虚拟地址转换为 void * 的实际地址</p></li><li><p>host_to_guest(p)</p><p> 与上一个相反</p></li></ol><blockquote><p>I/O 相关</p></blockquote><ol><li><p>uint32_t vaddr_read(vaddr_t, int);</p><p> 从虚拟地址 vaddr_t 出读取 int 字节的数据，最多为四个字节。</p></li><li><p>uint32_t paddr_read(paddr_t, int);</p><p> 和上一个没什么区别。。可能以后会改吧。</p></li><li><p>void vaddr_write(vaddr_t, int, uint32_t);</p><p> 将 int 字节的数据 uint32_t 写入虚拟地址 vaddr_t，</p></li><li><p>void paddr_write(paddr_t, int, uint32_t);</p><p> 同上。。</p></li></ol><blockquote><p>ModRM 相关</p></blockquote><ol><li><p>void operand_write(Operand <em>, rtlreg_t </em>);</p><p> 将右边指针指向的数据 写入 左边的操作数（reg or mem）</p></li></ol><blockquote><p>译码相关</p></blockquote><ol><li><p>make_DHelper(XXX);</p><p> 宏展开：decode_xxx 函数</p></li><li><p>make_EHelper(XXX);</p><p> 宏展开：exec_xxx 函数</p></li><li><p>make_DopHelper(XXX);</p><p> 宏展开：decode_op_xxx 函数</p></li></ol><blockquote><p>前缀</p></blockquote><ol><li><p>make_EHelper(operand_size);</p><p> 操作数前缀，转为 16 位操作数</p></li><li><p>static make_EHelper(2byte_esc);</p><p> 双字节指令前缀</p></li></ol><blockquote><p>杂项</p></blockquote><ol><li><p>make_group(name, …);</p><p> group 类型，需要进一步解析 ModRM 的 reg/opcode 字节 来确定真正的指令</p></li><li><p>make_EHelper(real);</p><p> 读取操作码，操作码写入 decoding.opcode，操作数宽度写入 src(dest, src1).width，然后执行 opcode_table 中的 译码函数 和 解码函数</p></li><li><p>IDEXW(id, ex, w);</p><p> 将要用到的，译码函数 decode_id， 执行函数 exec_ex，操作数宽度 w</p></li><li><p>idex(vaddr_t <em> eip, opcode_entry </em> e);</p><p> 解码（instr decode）和执行（execute）</p></li></ol><hr><hr><hr><hr><hr><hr><hr><hr><p>i386 手册: <a href="http://www.logix.cz/michal/doc/i386/" target="_blank" rel="external">地址</a></p><p>参考手册: <a href="http://www.fermimn.gov.it/linux/quarta/x86/index.htm" target="_blank" rel="external">地址</a></p><p>推荐通过附录A中的 opcode_map 和 opcode_table 了解指令</p>]]></content>
    
    <summary type="html">
    
      介绍 PA 中一些好用的接口函数
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="PAs" scheme="https://blog.nightmare.xin/tags/PAs/"/>
    
  </entry>
  
  <entry>
    <title>有趣的 PA1</title>
    <link href="https://blog.nightmare.xin/slash/pa1.html"/>
    <id>https://blog.nightmare.xin/slash/pa1.html</id>
    <published>2018-01-23T09:58:18.000Z</published>
    <updated>2018-03-16T10:27:53.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PA1-洞察世界的视点-简易调试器"><a href="#PA1-洞察世界的视点-简易调试器" class="headerlink" title="PA1 - 洞察世界的视点: 简易调试器"></a>PA1 - 洞察世界的视点: 简易调试器</h1><h1 id="在开始愉快的PA之旅之前"><a href="#在开始愉快的PA之旅之前" class="headerlink" title="在开始愉快的PA之旅之前"></a>在开始愉快的PA之旅之前</h1><p>直接运行在硬件上的是操作系统，操作系统向上层提供接口，前人将这些接口进一步封装成为库，而我们则使用这些库来编写程序，我们的程序经过预处理，编译，汇编，链接，然后运行，它们最终还是运行在硬件上。</p><p>PA 要实现一个模拟器，即NEMU (n emulator)，用软件模拟硬件（数组模拟内存，结构体模拟寄存器），模拟器运行在操作系统（linux）上，对上层开放接口，这些接口就是它模拟的各种硬件，接下来，应该是在这层’硬件’的上边，进一步开放接口使用户程序能够调用，从而将复杂的操作硬件的过程隐藏起来，就像真正的操作系统所做的一样。</p><p>其中 PA1 的内容是第一步，模拟各种硬件。（简易调试器应该属于搭建开发环境吧。。）</p><h1 id="RTFSC"><a href="#RTFSC" class="headerlink" title="RTFSC"></a>RTFSC</h1><p>RTFSC（即 read the fxxk source code），这是 NEMU 的结构，有计时器，键盘还有各种IO。</p><p>CPU，内存，设备构成模拟硬件，监视器则独立于该系统外。</p><p><img src="http://store.nightmare.xin/bd79f5e364df29846a63f87f72111865.png" alt=""></p><p>不过我们在 PA1 中不用了解这么多，基本只需要关注监视器（monitor）相关内容就好了，为什么说基本呢，因为编写监视器要调用其他部分的接口啊。。（如图 我的 merge）</p><p><img src="http://store.nightmare.xin/6804c0b9bfd9fae2f1b5aee2fc5d5e3f.png" alt=""></p><p>具体各部分内容自己探索好了，RTFSC。</p><p>在 main 函数中就两个函数，简单明了。init_monitor 进行了一些准备工作（测试各部分实现【cpu等】是否正常并进行一些初始化），ui_mainloop 是一个循环，不断地重复 取指，译码，执行，更新eip 的过程，这个过程模拟真实的计算机。</p><p>计算机加电之后将控制权交给 BIOS， BIOS 进行一些检查和简单的初始化，然后会唤醒操作系统，至此 BIOS 的使命就完成了。NEMU 模拟 BIOS启动之后，将客户程序加载到 0x100000 处执行。</p><h1 id="简易调试器"><a href="#简易调试器" class="headerlink" title="简易调试器"></a>简易调试器</h1><ul><li><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2>NEMU 有四个32位的通用寄存器，即eax（累加器），ebx（基数寄存器），ecx（计数器），edx（用于除法）。这些通用寄存器都可以拆分成16位的寄存器使用，即ax，bx，cx，dx，方便读写双字和字，同时兼容16位的处理器。进一步可以拆分成… 还是看图吧</li></ul><p><img src="http://store.nightmare.xin/6ebc49e16f7398b57a38d1d15a13055d.png" alt=""></p><p>esi（源地址），edi（目标地址），esp（指向栈顶），从栈顶访问元素很不方便因此引入 ebp（基地址）。</p><p>eip 是指令寄存器，每次执行完指令都要刷新（加上该指令的长度），如果是相对跳转指令还要加上偏移量，绝对跳转则直接转向目标地址。</p><p>然后实现寄存器的结构体就好了，记得匿名 union</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span> _32;</div><div class="line"><span class="keyword">uint16_t</span> _16;</div><div class="line"><span class="keyword">uint8_t</span> _8[<span class="number">2</span>];</div><div class="line">&#125; gpr[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="comment">/* Do NOT change the order of the GPRs' definitions. */</span></div><div class="line"></div><div class="line"><span class="comment">/* In NEMU, rtlreg_t is exactly uint32_t. This makes RTL instructions</span></div><div class="line"><span class="comment"> * in PA2 able to directly access these registers.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">rtlreg_t</span> eax, ecx, edx, ebx, esp, ebp, esi, edi;</div><div class="line"><span class="keyword">vaddr_t</span> eip;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125; CPU_state;</div></pre></td></tr></table></figure><p>单步执行直接调用接口就好了，cpu_exec()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_si</span><span class="params">(<span class="keyword">char</span> *args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (args != <span class="literal">NULL</span>)</div><div class="line">n = atoi(args);</div><div class="line"></div><div class="line">cpu_exec(n);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>打印寄存器直接 printf 输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_info</span><span class="params">(<span class="keyword">char</span> *args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (args == <span class="literal">NULL</span>) &#123;</div><div class="line">cmd_help(<span class="string">"info"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(args, <span class="string">"r"</span>) == <span class="number">0</span>) &#123;</div><div class="line">DebugText(<span class="string">"%%eip: 0x%08x\n"</span>, cpu.eip);</div><div class="line">DebugText(<span class="string">"%%eax: 0x%08x\n"</span>, cpu.eax);</div><div class="line">DebugText(<span class="string">"%%ebx: 0x%08x\n"</span>, cpu.ebx);</div><div class="line">DebugText(<span class="string">"%%ecx: 0x%08x\n"</span>, cpu.ecx);</div><div class="line">DebugText(<span class="string">"%%edx: 0x%08x\n"</span>, cpu.edx);</div><div class="line">DebugText(<span class="string">"%%esp: 0x%08x\n"</span>, cpu.esp);</div><div class="line">DebugText(<span class="string">"%%ebp: 0x%08x\n"</span>, cpu.ebp);</div><div class="line">DebugText(<span class="string">"%%esi: 0x%08x\n"</span>, cpu.esi);</div><div class="line">DebugText(<span class="string">"%%edi: 0x%08x\n"</span>, cpu.edi);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(args, <span class="string">"w"</span>) == <span class="number">0</span>) &#123;</div><div class="line">show_wp();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">cmd_help(<span class="string">"info"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>扫描内存直接调用函数 vaddr_read()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_x</span><span class="params">(<span class="keyword">char</span> *args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// parse args</span></div><div class="line">Assert(args != <span class="literal">NULL</span>, <span class="string">"too few argument"</span>);</div><div class="line"><span class="keyword">char</span> *sLen = strtok(args, <span class="string">" "</span>);</div><div class="line">Assert(sLen != <span class="literal">NULL</span>, <span class="string">"too few argument"</span>);</div><div class="line"><span class="keyword">char</span> *sAddr = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</div><div class="line">Assert(sAddr != <span class="literal">NULL</span>, <span class="string">"too few argument"</span>);</div><div class="line">Assert(strtok(<span class="literal">NULL</span>, <span class="string">" "</span>) == <span class="literal">NULL</span>, <span class="string">"too many argument"</span>);</div><div class="line"></div><div class="line"><span class="comment">// convert</span></div><div class="line"><span class="keyword">int</span> len = atoi(sLen);</div><div class="line"><span class="keyword">vaddr_t</span> nAddr = expr(sAddr);</div><div class="line"></div><div class="line"><span class="comment">// print</span></div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>) &#123;</div><div class="line">        <span class="comment">// 循环次数</span></div><div class="line"><span class="keyword">int</span> loop = len - i &lt; <span class="number">4</span> ? len - i : <span class="number">4</span>;</div><div class="line"><span class="keyword">uint32_t</span> data = vaddr_read(nAddr + i, loop);</div><div class="line">DebugText(<span class="string">"[0x%08x]: "</span>, nAddr + i);</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; loop; j++) &#123;</div><div class="line">DebugText(<span class="string">"0x%02x "</span>, data &amp; <span class="number">0xff</span>);</div><div class="line">data = data &gt;&gt; <span class="number">8</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2></li></ul><p>首先是 token 的匹配</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> static struct rule &#123;</div><div class="line">@@ -22,9 +32,25 @@ static struct rule &#123;</div><div class="line">    * Pay attention to the precedence level of different rules.</div><div class="line">    */</div><div class="line"></div><div class="line"><span class="deletion">-  &#123;" +", TK_NOTYPE&#125;,    // spaces</span></div><div class="line"><span class="deletion">-  &#123;"\\+", '+'&#125;,         // plus</span></div><div class="line"><span class="deletion">-  &#123;"==", TK_EQ&#125;         // equal</span></div><div class="line"><span class="addition">+  &#123;"^( +)", TK_NOTYPE&#125;,    // spaces</span></div><div class="line"><span class="addition">+  &#123;"^(==)", TK_EQ&#125;,        // equal</span></div><div class="line"><span class="addition">+  &#123;"^(!=)", TK_NEQ&#125;,// not equal</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  &#123;"^(\\+)", '+'&#125;,         // plus</span></div><div class="line"><span class="addition">+  &#123;"^(-)", '-'&#125;,         // sub or neg</span></div><div class="line"><span class="addition">+  &#123;"^(\\*)", '*'&#125;,         // multi or inner</span></div><div class="line"><span class="addition">+  &#123;"^(/)", '/'&#125;,         // div</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+  &#123;"^(0x[0-9a-fA-F]+)", TK_HEXADECIMAL&#125;,// hexadecimal numbers</span></div><div class="line"><span class="addition">+  &#123;"^(0|[1-9][0-9]*)", TK_DECIMAL&#125;,// decimal numbers</span></div><div class="line"><span class="addition">+  &#123;"^(\\$e(ax|bx|cx|dx|sp|bp|si|di|ip))", TK_REGNAME&#125;, // reg name</span></div><div class="line"><span class="addition">+  &#123;"^(,)", TK_COMMA&#125;,// comma</span></div><div class="line"><span class="addition">+  &#123;"^(\\()", TK_OPEN_PAREN&#125;,// open paren</span></div><div class="line"><span class="addition">+  &#123;"^(\\))", TK_CLOSE_PAREN&#125;,// close paren</span></div><div class="line"><span class="addition">+  &#123;"^(&amp;&amp;)", TK_LOGIC_AND&#125;, // logic and</span></div><div class="line"><span class="addition">+  &#123;"^[|]&#123;2&#125;", TK_LOGIC_OR&#125;, //logic or</span></div><div class="line"><span class="addition">+  &#123;"^(!)", TK_LOGIC_NOT&#125;,// logic not</span></div><div class="line"><span class="addition">+  // C has not (?!pattern), em...</span></div><div class="line"> &#125;;</div></pre></td></tr></table></figure><p>这样匹配后把那个判断 position 去掉了，感觉应该会优化一些</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">-      if (regexec(&amp;re[i], e + position, 1, &amp;pmatch, 0) == 0 &amp;&amp; pmatch.rm_so == 0) &#123;</span></div><div class="line"><span class="addition">+      if (regexec(&amp;re[i], e + position, 1, &amp;pmatch, 0) == 0) &#123;</span></div></pre></td></tr></table></figure><p>然后是将 匹配到的token信息 写入 tokens 数组，有一些token需要特殊处理（空格不用写入，数字和寄存器要写入更详细的信息）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">         /* TODO: Now a new token is recognized with rules[i]. Add codes</div><div class="line">          * to record the token in the array `tokens'. For certain types</div><div class="line">@@ -80,9 +110,45 @@ static bool make_token(char *e) &#123;</div><div class="line">          */</div><div class="line"></div><div class="line">         switch (rules[i].token_type) &#123;</div><div class="line"><span class="deletion">-          default: TODO();</span></div><div class="line"><span class="deletion">-        &#125;</span></div><div class="line"><span class="addition">+  case TK_DECIMAL:</span></div><div class="line"><span class="addition">+case TK_HEXADECIMAL:</span></div><div class="line"><span class="addition">+case TK_REGNAME:</span></div><div class="line"><span class="addition">+if (substr_len &gt; 31)</span></div><div class="line"><span class="addition">+panic("value too long");</span></div><div class="line"><span class="addition">+strncpy(tokens[nr_token].str, substr_start, substr_len);</span></div><div class="line"><span class="addition">+tokens[nr_token].str[substr_len] = '\0';</span></div><div class="line"><span class="addition">+tokens[nr_token].type = rules[i].token_type;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_NOTYPE:</span></div><div class="line"><span class="addition">+continue;</span></div><div class="line"><span class="addition">+  case '-':</span></div><div class="line"><span class="addition">+if (nr_token == 0 || check_negtive_prefixx(nr_token-1))&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = TK_NEGTIVE;</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("negtive");</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = rules[i].token_type;</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("sub");</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case '*':</span></div><div class="line"><span class="addition">+if (nr_token == 0 || check_inner_prefixx(nr_token-1))&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = TK_INNER;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+tokens[nr_token].type = rules[i].token_type;;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+          default:</span></div><div class="line"><span class="addition">+ tokens[nr_token].type = rules[i].token_type;</span></div><div class="line"><span class="addition">+       &#125;</span></div></pre></td></tr></table></figure><p>检查是否是 ‘(‘ expression ‘)’ 的形式</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+// check open_paren &amp; close_paren</span></div><div class="line"><span class="addition">+bool check_parentheses(int p, int q)&#123;</span></div><div class="line"><span class="addition">+if (tokens[p].type == TK_OPEN_PAREN &amp;&amp; tokens[q].type == TK_CLOSE_PAREN)&#123;</span></div><div class="line"><span class="addition">+p++;</span></div><div class="line"><span class="addition">+while (p &lt; q)&#123;</span></div><div class="line"><span class="addition">+if (tokens[p].type == TK_CLOSE_PAREN)</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+p++;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+return true;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>检查 ‘*’ 是否匹配 指针解引用</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+bool check_inner_prefixx(int t)&#123;</span></div><div class="line"><span class="addition">+int type = tokens[t].type;</span></div><div class="line"><span class="addition">+if (type == '+' || type == '-' || type == '*' || type == TK_INNER || type == '/' || type == TK_NEGTIVE || type == TK_OPEN_PAREN || type == TK_COMMA || type == TK_EQ)</span></div><div class="line"><span class="addition">+return true;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>检查 ‘-‘ 是否匹配 负号</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+bool check_negtive_prefixx(int t)&#123;</span></div><div class="line"><span class="addition">+int type = tokens[t].type;</span></div><div class="line"><span class="addition">+if (type == '+' || type == '-' || type == '*' || type == TK_INNER || type == '/' || type == TK_NEGTIVE || type == TK_OPEN_PAREN || type == TK_COMMA || type == TK_EQ)</span></div><div class="line"><span class="addition">+ return true;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>将不可能的 dominant 排除掉</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+bool check_domi_operate(int t)&#123;</span></div><div class="line"><span class="addition">+int type = tokens[t].type;</span></div><div class="line"><span class="addition">+if (type == '+' || type == '-' || type == '*' || type == TK_INNER || type == '/' || type == TK_NEGTIVE || type == TK_COMMA || type == TK_EQ || type == TK_NEQ || type == TK_LOGIC_AND || type == TK_LOGIC_OR || type == TK_LOGIC_NOT)</span></div><div class="line"><span class="addition">+return true;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+return false;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>获取 dominant 以及 表达式求值，匹配最低的优先级，也便于将来拓展</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+int get_dominant(int p, int q)&#123;</span></div><div class="line"><span class="addition">+int domi = -1;</span></div><div class="line"><span class="addition">+int min_level = 15;</span></div><div class="line"><span class="addition">+int level;</span></div><div class="line"><span class="addition">+int cur;</span></div><div class="line"><span class="addition">+for (cur = p; cur &lt;= q; cur++)&#123;</span></div><div class="line"><span class="addition">+// jump over bracks</span></div><div class="line"><span class="addition">+if (tokens[cur].type == TK_OPEN_PAREN)&#123;</span></div><div class="line"><span class="addition">+cur++;</span></div><div class="line"><span class="addition">+while (tokens[cur].type != TK_CLOSE_PAREN)</span></div><div class="line"><span class="addition">+cur++;</span></div><div class="line"><span class="addition">+cur++;</span></div><div class="line"><span class="addition">+if (cur &gt; q)</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+// jump non_diminant</span></div><div class="line"><span class="addition">+if (!check_domi_operate(cur))</span></div><div class="line"><span class="addition">+continue;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+switch (tokens[cur].type)&#123;</span></div><div class="line"><span class="addition">+case TK_NEGTIVE:</span></div><div class="line"><span class="addition">+case TK_INNER:</span></div><div class="line"><span class="addition">+case TK_LOGIC_NOT:</span></div><div class="line"><span class="addition">+level = 9;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case '*':</span></div><div class="line"><span class="addition">+case '/':</span></div><div class="line"><span class="addition">+level = 8;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case '+':</span></div><div class="line"><span class="addition">+case '-':</span></div><div class="line"><span class="addition">+level = 7;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_EQ:</span></div><div class="line"><span class="addition">+case TK_NEQ:</span></div><div class="line"><span class="addition">+level = 6;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_LOGIC_AND:</span></div><div class="line"><span class="addition">+level = 5;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_LOGIC_OR:</span></div><div class="line"><span class="addition">+level = 4;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+case TK_COMMA:</span></div><div class="line"><span class="addition">+level = 1;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+default:</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (level &lt;= min_level)&#123;</span></div><div class="line"><span class="addition">+min_level = level;</span></div><div class="line"><span class="addition">+domi = cur;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("hit level %d, %d - %d", min_level, p, q);</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+Assert(domi != -1, "cannot hit dominant");</span></div><div class="line"><span class="addition">+return domi;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+uint32_t eval(int p, int q)&#123;</span></div><div class="line"><span class="addition">+#ifdef MY_DEBUG</span></div><div class="line"><span class="addition">+Log("eval %d - %d", p, q);</span></div><div class="line"><span class="addition">+#endif</span></div><div class="line"><span class="addition">+if (p &gt; q)&#123;</span></div><div class="line"><span class="addition">+panic("Bad expression");</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else if (p == q)&#123;</span></div><div class="line"><span class="addition">+uint32_t n = 0;</span></div><div class="line"><span class="addition">+if (tokens[p].type == TK_DECIMAL)</span></div><div class="line"><span class="addition">+sscanf(tokens[p].str, "%d", &amp;n);</span></div><div class="line"><span class="addition">+else if (tokens[p].type == TK_HEXADECIMAL)</span></div><div class="line"><span class="addition">+sscanf(tokens[p].str + 2, "%x", &amp;n);</span></div><div class="line"><span class="addition">+else if (tokens[p].type == TK_REGNAME)&#123;</span></div><div class="line"><span class="addition">+if (strcmp(tokens[p].str + 2, "ax") == 0)</span></div><div class="line"><span class="addition">+return cpu.eax;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "bx") == 0)</span></div><div class="line"><span class="addition">+return cpu.ebx;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "cx") == 0)</span></div><div class="line"><span class="addition">+return cpu.ecx;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "dx") == 0)</span></div><div class="line"><span class="addition">+return cpu.edx;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "sp") == 0)</span></div><div class="line"><span class="addition">+return cpu.esp;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "bp") == 0)</span></div><div class="line"><span class="addition">+return cpu.ebp;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "si") == 0)</span></div><div class="line"><span class="addition">+return cpu.esi;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "di") == 0)</span></div><div class="line"><span class="addition">+return cpu.edi;</span></div><div class="line"><span class="addition">+else if (strcmp(tokens[p].str + 2, "ip") == 0)</span></div><div class="line"><span class="addition">+return cpu.eip;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+panic("no such register");</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+return n;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else if (check_parentheses(p, q))&#123;</span></div><div class="line"><span class="addition">+return eval(p+1, q-1);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+int domi = get_dominant(p, q);</span></div><div class="line"><span class="addition">+if (tokens[domi].type == TK_NEGTIVE)</span></div><div class="line"><span class="addition">+return -1 * eval(domi+1, q);</span></div><div class="line"><span class="addition">+if (tokens[domi].type == TK_INNER)</span></div><div class="line"><span class="addition">+return pmem[eval(domi+1, q)];</span></div><div class="line"><span class="addition">+if (tokens[domi].type == TK_LOGIC_NOT)</span></div><div class="line"><span class="addition">+return !(eval(domi+1, q));</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+int val1 = eval(p, domi-1);</span></div><div class="line"><span class="addition">+int val2 = eval(domi+1, q);</span></div><div class="line"><span class="addition">+switch (tokens[domi].type)&#123;</span></div><div class="line"><span class="addition">+case '+':</span></div><div class="line"><span class="addition">+return val1 + val2;</span></div><div class="line"><span class="addition">+case '-':</span></div><div class="line"><span class="addition">+return val1 - val2;</span></div><div class="line"><span class="addition">+case '*':</span></div><div class="line"><span class="addition">+return val1 * val2;</span></div><div class="line"><span class="addition">+case '/':</span></div><div class="line"><span class="addition">+return val1 / val2;</span></div><div class="line"><span class="addition">+case TK_EQ:</span></div><div class="line"><span class="addition">+return val1 == val2;</span></div><div class="line"><span class="addition">+case TK_NEQ:</span></div><div class="line"><span class="addition">+return val1 != val2;</span></div><div class="line"><span class="addition">+case TK_LOGIC_AND:</span></div><div class="line"><span class="addition">+return val1 &amp;&amp; val2;</span></div><div class="line"><span class="addition">+case TK_LOGIC_OR:</span></div><div class="line"><span class="addition">+return val1 || val2;</span></div><div class="line"><span class="addition">+case TK_COMMA:</span></div><div class="line"><span class="addition">+return val2;</span></div><div class="line"><span class="addition">+default:</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>最后当然要测试一下，我真的觉得我需要一个单元测试框架了，这样好累</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+void expr_test()&#123;</span></div><div class="line"><span class="addition">+bool success = false;</span></div><div class="line"><span class="addition">+#define N 27</span></div><div class="line"><span class="addition">+char es[][N] = &#123;"3+2", "3-2", "3*2", "3/2",// base test</span></div><div class="line"><span class="addition">+"3==3", "3==2", "3!=3", "3!=2",</span></div><div class="line"><span class="addition">+"1&amp;&amp;0", "1&amp;&amp;1", "1||1", "1||0",</span></div><div class="line"><span class="addition">+"!3", "!0", "32", "0", "0x00", "0xff",</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+"(3+2)", "(-2*3)", "-(3+4)-(-2*3)", "3+2, 3*4",</span></div><div class="line"><span class="addition">+    "*(0x100000)", "$eip", "*$eip", "*($eip + 1)", "*($eip + 2)",</span></div><div class="line"><span class="addition">+&#125;;</span></div><div class="line"><span class="addition">+int res[N] = &#123;5, 1, 6, 1,</span></div><div class="line"><span class="addition">+   1, 0, 0, 1,</span></div><div class="line"><span class="addition">+0, 1, 1, 1,</span></div><div class="line"><span class="addition">+0, 1, 32, 0, 0, 255,</span></div><div class="line"></div><div class="line"><span class="deletion">-  return 0;</span></div><div class="line"><span class="addition">+5, -6, -1, 12,</span></div><div class="line"><span class="addition">+184, 1048576, 184, 52, 18,</span></div><div class="line"><span class="addition">+&#125;;</span></div><div class="line"><span class="addition">+int i;</span></div><div class="line"><span class="addition">+for (i = 0; i &lt; N; i++)&#123;</span></div><div class="line"><span class="addition">+Log("test: %s = %d",es[i], res[i]);</span></div><div class="line"><span class="addition">+int nres = expr(es[i], &amp;success);</span></div><div class="line"><span class="addition">+Assert(nres == res[i], "expr result: %d", nres);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><ul><li><h2 id="监视点"><a href="#监视点" class="headerlink" title="监视点"></a>监视点</h2></li></ul><p>设计接口，设置一个新的监视点时，从 free_ 删掉一个加入 head，删除监视点时相反。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+WP * new_wp(char *str, int value)&#123;</span></div><div class="line"><span class="addition">+if (free_ != NULL)&#123;</span></div><div class="line"><span class="addition">+WP *t = free_;</span></div><div class="line"><span class="addition">+free_ = free_-&gt;next;</span></div><div class="line"><span class="addition">+t-&gt;next = NULL;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (strlen(str) &gt; 31)</span></div><div class="line"><span class="addition">+panic("expression too long");</span></div><div class="line"></div><div class="line"><span class="addition">+strcpy(t-&gt;str, str);</span></div><div class="line"><span class="addition">+t-&gt;value = value;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (head == NULL)&#123;</span></div><div class="line"><span class="addition">+head = t;</span></div><div class="line"><span class="addition">+t-&gt;next = NULL;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+t-&gt;next = head;</span></div><div class="line"><span class="addition">+head = t;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return t;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+assert(0);</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+void free_wp(int id)&#123;</span></div><div class="line"><span class="addition">+WP *t = head;</span></div><div class="line"><span class="addition">+WP *r = NULL;</span></div><div class="line"><span class="addition">+if (t-&gt;NO == id)&#123;</span></div><div class="line"><span class="addition">+r = t;</span></div><div class="line"><span class="addition">+head = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+while (t-&gt;next != NULL)&#123;</span></div><div class="line"><span class="addition">+if (t-&gt;next-&gt;NO == id)&#123;</span></div><div class="line"><span class="addition">+r = t-&gt;next;</span></div><div class="line"><span class="addition">+t-&gt;next = t-&gt;next-&gt;next;</span></div><div class="line"><span class="addition">+break;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+t = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+if (r == NULL)</span></div><div class="line"><span class="addition">+panic("couldnt found wp %d", id);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+r-&gt;value = 0;</span></div><div class="line"><span class="addition">+if (free_ == NULL)&#123;</span></div><div class="line"><span class="addition">+free_ = r;</span></div><div class="line"><span class="addition">+r-&gt;next = NULL;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+r-&gt;next = free_;</span></div><div class="line"><span class="addition">+free_ = r;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>打印监视点只需要遍历 head</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+void show_wp()&#123;</span></div><div class="line"><span class="addition">+WP *t = head;</span></div><div class="line"><span class="addition">+while (t != NULL)&#123;</span></div><div class="line"><span class="addition">+printf("wp [%d], %s: %d\n", t-&gt;NO, t-&gt;str, t-&gt;value);</span></div><div class="line"><span class="addition">+t = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+void show_free()&#123;</span></div><div class="line"><span class="addition">+WP *t = free_;</span></div><div class="line"><span class="addition">+while (t != NULL)&#123;</span></div><div class="line"><span class="addition">+printf("wp [%d], %s: %d\n", t-&gt;NO, t-&gt;str, t-&gt;value);</span></div><div class="line"><span class="addition">+t = t-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>检查监视点的值是否有变化，检查所有有变化的监视点</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">     /* TODO: check watchpoints here. */</div><div class="line"><span class="deletion">-</span></div><div class="line"><span class="addition">+WP *t = check_wp(NULL);</span></div><div class="line"><span class="addition">+while (t != NULL)&#123;</span></div><div class="line"><span class="addition">+if (nemu_state != NEMU_END)</span></div><div class="line"><span class="addition">+nemu_state = NEMU_STOP;</span></div><div class="line"><span class="addition">+printf("[-] wp [%d]:(%s) has changed, its value is %d\n", t-&gt;NO, t-&gt;str, t-&gt;value);</span></div><div class="line"><span class="addition">+t = check_wp(t);</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+WP * check_wp(WP *w)&#123;</span></div><div class="line"><span class="addition">+if (w == NULL)&#123;</span></div><div class="line"><span class="addition">+w = head;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+while (w != NULL)&#123;</span></div><div class="line"><span class="addition">+bool success;</span></div><div class="line"><span class="addition">+int res = expr(w-&gt;str, &amp;success);</span></div><div class="line"><span class="addition">+if (res != w-&gt;value)&#123;</span></div><div class="line"><span class="addition">+w-&gt;value = res;</span></div><div class="line"><span class="addition">+return w;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+w = w-&gt;next;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return NULL;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><p>设置监视点和删除监视点</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="addition">+static int cmd_w(char *args)&#123;</span></div><div class="line"><span class="addition">+if (args == NULL)&#123;</span></div><div class="line"><span class="addition">+cmd_help("w");</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+char *tok1 = strtok(args, "=");</span></div><div class="line"><span class="addition">+char *tok2 = strtok(NULL, "=");</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+bool success;</span></div><div class="line"><span class="addition">+int res;</span></div><div class="line"><span class="addition">+if (tok2 == NULL)</span></div><div class="line"><span class="addition">+res = expr(tok1, &amp;success);</span></div><div class="line"><span class="addition">+else&#123;</span></div><div class="line"><span class="addition">+res = expr(tok2, &amp;success);</span></div><div class="line"><span class="addition">+*(tok2-1) = '\0';</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+WP *w = new_wp(tok1, res);</span></div><div class="line"><span class="addition">+   printf("[-] set wp [%d], %s: %d\n", w-&gt;NO, w-&gt;str, w-&gt;value);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+static int cmd_d(char *args)&#123;</span></div><div class="line"><span class="addition">+if (args == NULL)&#123;</span></div><div class="line"><span class="addition">+cmd_help("d");</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+int id = 0;</span></div><div class="line"><span class="addition">+sscanf(args, "%d", &amp;id);</span></div><div class="line"><span class="addition">+free_wp(id);</span></div><div class="line"><span class="addition">+</span></div><div class="line"><span class="addition">+return 0;</span></div><div class="line"><span class="addition">+&#125;</span></div></pre></td></tr></table></figure><h1 id="熟悉i386手册"><a href="#熟悉i386手册" class="headerlink" title="熟悉i386手册"></a>熟悉i386手册</h1><h2 id="必答题"><a href="#必答题" class="headerlink" title="必答题"></a>必答题</h2><blockquote><p>查阅i386手册 理解了科学查阅手册的方法之后, 请你尝试在i386手册中查阅以下问题所在的位置, 把需要阅读的范围写到你的实验报告里面:</p></blockquote><pre><code>EFLAGS寄存器中的CF位是什么意思?        x86结构 carry flagModR/M字节是什么?                    指令格式部分mov指令的具体格式是怎么样的?          指令集细节</code></pre><blockquote><p>shell命令 完成PA1的内容之后, nemu目录下的所有.c和.h和文件总共有多少行代码? 你是使用什么命令得到这个结果的? 和框架代码相比, 你在PA1中编写了多少行代码? (Hint: 使用 git checkout 可以回到”过去”, 具体使用方法请查阅 man git-checkout ) 你可以把这条命令写入 Makefile 中, 随着实验进度的推进, 你可以很方便地统计工程的代码行数, 例如敲入 make count 就会自动运行统计代码行数的命令.</p></blockquote><pre><code>4025行find . -name *.[ch] | xargs wc -l15479 - 14931行git checkout pa0 &amp;&amp; find . | xargs wc -lgit checkout pa1 &amp;&amp; find . | xargs wc -l</code></pre><blockquote><p>再来个难一点的, 除去空行之外, nemu目录下的所有.c和.h文件总共有多少行代码?</p></blockquote><pre><code>3321find . -name *.[ch] | xargs grep -v &quot;^$&quot; | wc -l</code></pre><blockquote><p>使用man 打开工程目录下的 Makefile 文件, 你会在 CFLAGS 变量中看到gcc的一些编译选项. 请解释gcc中的 -Wall 和 -Werror 有什么作用? 为什么要使用 -Wall 和 -Werror ?</p></blockquote><pre><code>W（warning），-Wall（显示所有警告），-Werror（将所有警告视为error）</code></pre><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><blockquote><p>假设你在Windows中使用Virtualbox安装了一个GNU/Linux虚拟机, 然后在虚拟机中完成PA, 通过NEMU运行Hello World程序. 在这样的情况下, 尝试画出相应的层次图.</p></blockquote><pre><code>计算机硬件 -&gt; 操作系统（windows） -&gt; 软件（virtualbox） -&gt; 虚拟硬件（虚拟硬盘等） -&gt; 虚拟操作系统（linux） -&gt; 模拟器软件（NEMU） -&gt; 模拟器硬件（内存，寄存器等） -&gt; 开放接口（操作系统） -&gt; 用户程序（hello world）</code></pre><blockquote><p>程序从哪里开始？</p></blockquote><pre><code>main 函数，main 函数是程序的入口地址。</code></pre><blockquote><p>opcode_table 到底是个什么类型的数组?</p></blockquote><pre><code>opcode_table 是结构体数组</code></pre><blockquote><p>在 cmd_c() 函数中, 调用 cpu_exec() 的时候传入了参数 -1 , 你知道这是什么意思吗?</p></blockquote><pre><code>-1 传给了一个无符号数 uint64，就是最大的数字，n 是执行次数，所以 continue 将依次执行完所有指令。（果然温故而知新啊，古人诚不欺我，写报告的时候才突然想到的）</code></pre><blockquote><p>谁来指示程序的结束?</p></blockquote><pre><code>应该是由指令集确定的吧</code></pre><blockquote><p>体会： 从表达式求值窥探编译器</p></blockquote><pre><code>应该是类似的词法分析，然后建立符号表什么的，最后编译链接成二进制。框架代码中定义 wp_pool 等变量的时候使用了关键字 static , static 在此处的含义是什么? 为什么要在此处使用它?</code></pre><p>这里使用 static 是为了限制变量作用域到只能本文件引用，一般的全局变量可以被其他文件引用。</p><blockquote><p>以下问题涉及到指令，暂时无法理解，可以之后补充</p></blockquote><pre><code>一点也不能长?我们知道 int3 指令不带任何操作数, 操作码为1个字节, 因此指令的长度是1个字节. 这是必须的吗? 假设有一种IA-32体系结构的变种my-IA-32, 除了 int3 指令的长度变成了2个字节之外, 其余指令和IA-32相同. 在my-IA-32中, 文章中的断点机制还可以正常工作吗? 为什么?&quot;随心所欲&quot;的断点如果把断点设置在指令的非首字节(中间或末尾), 会发生什么? 你可以在GDB中尝试一下, 然后思考并解释其中的缘由.NEMU的前世今生你已经对NEMU的工作方式有所了解了. 事实上在NEMU诞生之前, NEMU曾经有一段时间并不叫NEMU, 而是叫NDB(NJU Debugger), 后来由于某种原因才改名为NEMU. 如果你想知道这一段史前的秘密, 你首先需要了解这样一个问题: 模拟器(Emulator)和调试器(Debugger)有什么不同? 更具体地, 和NEMU相比, GDB到底是如何调试程序的?</code></pre><p>Over</p>]]></content>
    
    <summary type="html">
    
      洞察世界的视点 - 简易调试器
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="code" scheme="https://blog.nightmare.xin/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>有趣的 PA1</title>
    <link href="https://blog.nightmare.xin/slash/pa1.1.html"/>
    <id>https://blog.nightmare.xin/slash/pa1.1.html</id>
    <published>2018-01-23T09:58:18.000Z</published>
    <updated>2018-03-16T10:30:27.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PA1-洞察世界的视点-简易调试器"><a href="#PA1-洞察世界的视点-简易调试器" class="headerlink" title="PA1 - 洞察世界的视点: 简易调试器"></a>PA1 - 洞察世界的视点: 简易调试器</h1><h1 id="在开始愉快的PA之旅之前"><a href="#在开始愉快的PA之旅之前" class="headerlink" title="在开始愉快的PA之旅之前"></a>在开始愉快的PA之旅之前</h1><p>直接运行在硬件上的是操作系统，操作系统向上层提供接口，前人将这些接口进一步封装成为库，而我们则使用这些库来编写程序，我们的程序经过预处理，编译，汇编，链接，然后运行，它们最终还是运行在硬件上。</p><p>PA 要实现一个模拟器，即NEMU (n emulator)，用软件模拟硬件（数组模拟内存，结构体模拟寄存器），模拟器运行在操作系统（linux）上，对上层开放接口，这些接口就是它模拟的各种硬件，接下来，应该是在这层’硬件’的上边，进一步开放接口使用户程序能够调用，从而将复杂的操作硬件的过程隐藏起来，就像真正的操作系统所做的一样。</p><p>其中 PA1 的内容是第一步，模拟各种硬件。（简易调试器应该属于搭建开发环境吧。。）</p><h1 id="RTFSC"><a href="#RTFSC" class="headerlink" title="RTFSC"></a>RTFSC</h1><p>RTFSC（即 read the fxxk source code），这是 NEMU 的结构，有计时器，键盘还有各种IO。</p><p>CPU，内存，设备构成模拟硬件，监视器则独立于该系统外。</p><p><img src="http://store.nightmare.xin/bd79f5e364df29846a63f87f72111865.png" alt=""></p><p>不过我们在 PA1 中不用了解这么多，基本只需要关注监视器（monitor）相关内容就好了，为什么说基本呢，因为编写监视器要调用其他部分的接口啊。。（如图 我的 merge）</p><p><img src="http://store.nightmare.xin/6804c0b9bfd9fae2f1b5aee2fc5d5e3f.png" alt=""></p><p>具体各部分内容自己探索好了，RTFSC。</p><p>在 main 函数中就两个函数，简单明了。init_monitor 进行了一些准备工作（测试各部分实现【cpu等】是否正常并进行一些初始化），ui_mainloop 是一个循环，不断地重复 取指，译码，执行，更新eip 的过程，这个过程模拟真实的计算机。</p><p>计算机加电之后将控制权交给 BIOS， BIOS 进行一些检查和简单的初始化，然后会唤醒操作系统，至此 BIOS 的使命就完成了。NEMU 模拟 BIOS启动之后，将客户程序加载到 0x100000 处执行。</p><h1 id="简易调试器"><a href="#简易调试器" class="headerlink" title="简易调试器"></a>简易调试器</h1><ul><li><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2></li></ul><p>NEMU 有四个32位的通用寄存器，即eax（累加器），ebx（基数寄存器），ecx（计数器），edx（用于除法）。这些通用寄存器都可以拆分成16位的寄存器使用，即ax，bx，cx，dx，方便读写双字和字，同时兼容16位的处理器。进一步可以拆分成… 还是看图吧</p><p><img src="http://store.nightmare.xin/6ebc49e16f7398b57a38d1d15a13055d.png" alt=""></p><p>esi（源地址），edi（目标地址），esp（指向栈顶），从栈顶访问元素很不方便因此引入 ebp（基地址）。</p><p>eip 是指令寄存器，每次执行完指令都要刷新（加上该指令的长度），如果是相对跳转指令还要加上偏移量，绝对跳转则直接转向目标地址。</p><p>然后实现寄存器的结构体就好了，记得匿名 union</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span> _32;</div><div class="line"><span class="keyword">uint16_t</span> _16;</div><div class="line"><span class="keyword">uint8_t</span> _8[<span class="number">2</span>];</div><div class="line">&#125; gpr[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="comment">/* Do NOT change the order of the GPRs' definitions. */</span></div><div class="line"></div><div class="line"><span class="comment">/* In NEMU, rtlreg_t is exactly uint32_t. This makes RTL instructions</span></div><div class="line"><span class="comment"> * in PA2 able to directly access these registers.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">rtlreg_t</span> eax, ecx, edx, ebx, esp, ebp, esi, edi;</div><div class="line"><span class="keyword">vaddr_t</span> eip;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125; CPU_state;</div></pre></td></tr></table></figure><p>单步执行直接调用接口就好了，cpu_exec()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_si</span><span class="params">(<span class="keyword">char</span> *args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (args != <span class="literal">NULL</span>)</div><div class="line">n = atoi(args);</div><div class="line"></div><div class="line">cpu_exec(n);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>打印寄存器直接 printf 输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_info</span><span class="params">(<span class="keyword">char</span> *args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (args == <span class="literal">NULL</span>) &#123;</div><div class="line">cmd_help(<span class="string">"info"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(args, <span class="string">"r"</span>) == <span class="number">0</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%eip: 0x%08x\n"</span>, cpu.eip);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%eax: 0x%08x\n"</span>, cpu.eax);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%ebx: 0x%08x\n"</span>, cpu.ebx);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%ecx: 0x%08x\n"</span>, cpu.ecx);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%edx: 0x%08x\n"</span>, cpu.edx);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%esp: 0x%08x\n"</span>, cpu.esp);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%ebp: 0x%08x\n"</span>, cpu.ebp);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%esi: 0x%08x\n"</span>, cpu.esi);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%%edi: 0x%08x\n"</span>, cpu.edi);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(args, <span class="string">"w"</span>) == <span class="number">0</span>) &#123;</div><div class="line">show_wp();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">cmd_help(<span class="string">"info"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>扫描内存直接调用函数 vaddr_read()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_x</span><span class="params">(<span class="keyword">char</span> *args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// parse args</span></div><div class="line">Assert(args != <span class="literal">NULL</span>, <span class="string">"too few argument"</span>);</div><div class="line"><span class="keyword">char</span> *sLen = strtok(args, <span class="string">" "</span>);</div><div class="line">Assert(sLen != <span class="literal">NULL</span>, <span class="string">"too few argument"</span>);</div><div class="line"><span class="keyword">char</span> *sAddr = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</div><div class="line">Assert(sAddr != <span class="literal">NULL</span>, <span class="string">"too few argument"</span>);</div><div class="line">Assert(strtok(<span class="literal">NULL</span>, <span class="string">" "</span>) == <span class="literal">NULL</span>, <span class="string">"too many argument"</span>);</div><div class="line"></div><div class="line"><span class="comment">// convert</span></div><div class="line"><span class="keyword">int</span> len = atoi(sLen);</div><div class="line"><span class="keyword">vaddr_t</span> nAddr = expr(sAddr);</div><div class="line"></div><div class="line"><span class="comment">// print</span></div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>) &#123;</div><div class="line">        <span class="comment">// 循环次数</span></div><div class="line"><span class="keyword">int</span> loop = len - i &lt; <span class="number">4</span> ? len - i : <span class="number">4</span>;</div><div class="line"><span class="keyword">uint32_t</span> data = vaddr_read(nAddr + i, loop);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[0x%08x]: "</span>, nAddr + i);</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; loop; j++) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, data &amp; <span class="number">0xff</span>);</div><div class="line">data = data &gt;&gt; <span class="number">8</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      洞察世界的视点 - 简易调试器
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="code" scheme="https://blog.nightmare.xin/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>顺利的 PA0</title>
    <link href="https://blog.nightmare.xin/slash/pa0.html"/>
    <id>https://blog.nightmare.xin/slash/pa0.html</id>
    <published>2018-01-20T09:58:18.000Z</published>
    <updated>2018-02-19T09:04:07.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PA0-世界诞生的前夜-开发环境配置"><a href="#PA0-世界诞生的前夜-开发环境配置" class="headerlink" title="PA0 - 世界诞生的前夜: 开发环境配置"></a>PA0 - 世界诞生的前夜: 开发环境配置</h1><h2 id="Installing-a-GNU-Linux-VM"><a href="#Installing-a-GNU-Linux-VM" class="headerlink" title="Installing a GNU/Linux VM"></a>Installing a GNU/Linux VM</h2><pre><code>我的搭配是 阿里云主机（Ubuntu 16.04 LTS） + docker（debian 9 stretch）</code></pre><h2 id="Installing-Docker"><a href="#Installing-Docker" class="headerlink" title="Installing Docker"></a>Installing Docker</h2><pre><code>在官网下载docker即可</code></pre><p><img src="http://store.nightmare.xin/d0f6c7541943a4c29d0f07ed4518d561.png" alt=""></p><h2 id="Preparing-Dockerfile"><a href="#Preparing-Dockerfile" class="headerlink" title="Preparing Dockerfile"></a>Preparing Dockerfile</h2><pre><code>复制粘贴到Dockerfile并修改username &amp; password</code></pre><p><img src="http://store.nightmare.xin/32a8970410a21f57e48b53f7ebef8026.png" alt=""></p><h2 id="Building-Docker-image"><a href="#Building-Docker-image" class="headerlink" title="Building Docker image"></a>Building Docker image</h2><pre><code>根据Dockerfile建立镜像（原示例debian镜像被我删了）</code></pre><p><img src="http://store.nightmare.xin/c81e728d9d4c2f636f067f89cc14862c.png" alt=""></p><h2 id="Creating-Debian-Container"><a href="#Creating-Debian-Container" class="headerlink" title="Creating Debian Container"></a>Creating Debian Container</h2><pre><code>根据镜像创建容器--name指定容器名字，选择tag v2，-p将本机的20022端口映射到容器的22端口（即ssh端口，通过ssh连接本机的20022端口就可以连接到容器），</code></pre><p><img src="http://store.nightmare.xin/eccbc87e4b5ce2fe28308fd9f2a7baf3.png" alt=""></p><h1 id="First-Exploration-with-GNU-Linux"><a href="#First-Exploration-with-GNU-Linux" class="headerlink" title="First Exploration with GNU/Linux"></a>First Exploration with GNU/Linux</h1><h2 id="SSH-Configuration"><a href="#SSH-Configuration" class="headerlink" title="SSH Configuration"></a>SSH Configuration</h2><pre><code>ssh连接到本地的20022端口（该端口映射容器的ssh端口）-p指定端口号，username是前边添加的用户名，localhost选择本机，配置好用户名，主机号，连接端口后就可以直接使用putty连接容器了</code></pre><p><img src="http://store.nightmare.xin/a87ff679a2f3e71d9181a67b7542122c.png" alt=""></p><h2 id="First-exploration"><a href="#First-exploration" class="headerlink" title="First exploration"></a>First exploration</h2><pre><code>使用ssh连接到容器（debian）用户名是之前设置的，主机名可以修改为自己喜欢的名字，我修改了./bashrc以便登录时直接进入到工作目录（方便做pa1）</code></pre><p><img src="http://store.nightmare.xin/d2a37a9a62bec1cd830223cfc7bd0baf.png" alt=""></p><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><blockquote><p>Where is GUI?</p></blockquote><pre><code>Gui，即graphic user interface，与Cli，command line interface最近看《x86汇编》，了解到显示器，或者说显卡有两种工作方式。一屏有很多像素点，可以通过设置这些像素点的亮暗和颜色来显示界面，即依次渲染每一个像素点，这是图形界面。第二种实现准备一些字符，这样不必关心该字符每一个像素点是如何渲染的，即命令行界面。因此debian要比windows看起来小得多。</code></pre><blockquote><p>Have you wondered if there is something that you can do it in CLI,but can not in GUI? Have no idea? If you are asked to count how many lines of code you have coded during the 程序设计基础 course, what will you do?</p></blockquote><pre><code>图形界面能做的命令行基本都能做，命令行能做的图形界面未必能做，因为图形界面将许多细节封装在黑盒子里我们触碰不到。统计行数 cat test.txt | wc –l。</code></pre><blockquote><p>why vim is called 编辑器之神.</p></blockquote><pre><code>Vim 支持多种平台，有多种工作模式，各种便利的快捷键。。</code></pre><blockquote><p>Why Windows is quite “fat”?</p></blockquote><pre><code>大概是因为桌面系统吧。。</code></pre><p>&gt;<br>    最后exit退出登录。</p><h1 id="Installing-Tools"><a href="#Installing-Tools" class="headerlink" title="Installing Tools"></a>Installing Tools</h1><h2 id="Checking-network-state"><a href="#Checking-network-state" class="headerlink" title="Checking network state"></a>Checking network state</h2><pre><code>Ping百度，-c指定ping的次数</code></pre><p><img src="http://store.nightmare.xin/2071475516c2e4c025ca20cc3a796168.png" alt=""></p><h2 id="Updating-pakage-information"><a href="#Updating-pakage-information" class="headerlink" title="Updating pakage information"></a>Updating pakage information</h2><pre><code>替换apt源为中科大的源，update从源列表更新信息，upgrade升级本地软件到最新版本。一些重要的操作需要超级管理员权限，防止误操作造成大的损失吧。。关机当然是很重要的操作。</code></pre><h2 id="Install-tools-for-pas"><a href="#Install-tools-for-pas" class="headerlink" title="Install tools for pas"></a>Install tools for pas</h2><pre><code>依次安装build工具包，gdb，git，libreadline-dev，libsdl2-dev，qemu-system-x86</code></pre><h2 id="Configuring-vim"><a href="#Configuring-vim" class="headerlink" title="Configuring vim"></a>Configuring vim</h2><pre><code>安装vim，输入vimtutor，学习操作配置vim语法高亮（去掉注释）学习diff格式配置更多vim特性</code></pre><h1 id="More-Exploration"><a href="#More-Exploration" class="headerlink" title="More Exploration"></a>More Exploration</h1><h2 id="Learning-to-use-basic-tools"><a href="#Learning-to-use-basic-tools" class="headerlink" title="Learning to use basic tools"></a>Learning to use basic tools</h2><pre><code>学习基本linux知识练习hello world</code></pre><p><img src="http://store.nightmare.xin/987e7c907b3754c2c256297859d9ffb3.png" alt=""></p><pre><code>学习makefile学习gdb学习man，为了方便同时安装了man中文手册</code></pre><p><img src="http://store.nightmare.xin/26223a03a8150a53c62b0670234c4851.png" alt=""></p><p><img src="http://store.nightmare.xin/3ac1943c40b23d003e9e0bb811110e42.png" alt=""></p><pre><code>学习read the fuck manual</code></pre><h2 id="Install-tmux"><a href="#Install-tmux" class="headerlink" title="Install tmux"></a>Install tmux</h2><pre><code>安装使用tmux</code></pre><p><img src="http://store.nightmare.xin/c5fc3450f457b4ce88e769cc25a3b258.png" alt=""></p><blockquote><p>滚动条?</p></blockquote><pre><code>《x86汇编：从实模式到保护模式》有一章使用汇编实现了滚动条，即下滚一行就是将每一行的字符依次重新写到上一行，第一行存入内存，最后一行使用默认的黑色背景空字符。</code></pre><blockquote><p>Transfer files betwoon host and container？</p></blockquote><pre><code>我使用的是xftp，如果是在ubuntu和docker传文件的话就用scp</code></pre><p><img src="http://store.nightmare.xin/68208c81cb8beeae85f58fb8efa79e02.png" alt=""></p><p><img src="http://store.nightmare.xin/2ad3d65d1a1aad9b7422c1f3954b7fca.png" alt=""></p><p><img src="http://store.nightmare.xin/ee3cf09c2ef5bb06fd08ddfc3e74440a.png" alt=""></p><h1 id="Acquire-source-code-for-pas"><a href="#Acquire-source-code-for-pas" class="headerlink" title="Acquire source code for pas"></a>Acquire source code for pas</h1><h2 id="Getting-source-code"><a href="#Getting-source-code" class="headerlink" title="Getting source code"></a>Getting source code</h2><blockquote><p>为什么不使用root账户做实验</p></blockquote><pre><code>因为容易误操作造成重大灾难。</code></pre><p>&gt;<br>    git clone 代码到本地<br>    配置git<br>    切换分支master<br>    运行git初始化<br>    学习git<br><img src="http://store.nightmare.xin/cfdb221d6a5487249b8f16a9e59ae5de.png" alt=""></p><pre><code>我已经commit了, 运行make run，已经做完cpu的配置，所以没错误（切换到了pa1）。。</code></pre><p><img src="http://store.nightmare.xin/7b46593209cb61e2e5e2eb0bff2bd01e.png" alt=""></p><p><img src="http://store.nightmare.xin/fc29afb1f09a66c6e3489dd42b457924.png" alt=""></p><p><img src="http://store.nightmare.xin/ac7d9a906d6339418a161961dd33d9ec.png" alt=""></p><p><img src="http://store.nightmare.xin/948c8095dd3bd55d81f8ebd1219acfe3.png" alt=""></p><pre><code>gdb正常</code></pre><p><img src="http://store.nightmare.xin/85d08050c9d8f25555b0a9094f5328c5.png" alt=""></p><pre><code>文件结构</code></pre><p><img src="http://store.nightmare.xin/eb33f58daf8434ced28be3d709ae1797.png" alt=""></p><p>Over</p>]]></content>
    
    <summary type="html">
    
      世界诞生的前夜 - 开发环境配置
    
    </summary>
    
      <category term="PAs" scheme="https://blog.nightmare.xin/categories/PAs/"/>
    
    
      <category term="code" scheme="https://blog.nightmare.xin/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET 课程设计报告</title>
    <link href="https://blog.nightmare.xin/asp.html"/>
    <id>https://blog.nightmare.xin/asp.html</id>
    <published>2017-12-17T09:58:18.000Z</published>
    <updated>2017-12-17T10:08:14.376Z</updated>
    
    <content type="html"><![CDATA[<ul><li>网站地址 <a href="http://nightmare.xin/" target="_blank" rel="external">nightmare.xin</a></li><li><p>支持注册和登录功能， 有后台数据库， 登陆成功会跳转。</p></li><li><p>前端UI 秦瑞哲</p></li><li>后端处理 程斌</li><li>2017/12/11</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次课程要求设计一个网站，这就涉及到编程语言和框架的选取问题，之前只是粗略的学了一些 bootstrap，甚至连 jQuery 都没怎么用过，短时间内应该做不出什么太大的进展，索性专注于后端的设计。学过一点 php 和 python，但都是一些简单的 php 页面，在 thinkphp 和 flask 之间最终选择了 flask (<del>听说要比 Django 轻量级很多</del>)</p><h2 id="python-flask-apache-mysql"><a href="#python-flask-apache-mysql" class="headerlink" title="python + flask + apache + mysql"></a>python + flask + apache + mysql</h2><p>静态网站比如 hexo 是没有后台的，不具备处理请求的能力，而我也不打算使用这些一键建站(lamp甚至wordpress之类)的框架。因此需要自己设计一些接口供前端调用。下面是服务器的一些配置：主机(ubuntu 16.04 LTS)，web 服务器(apache 2.4)，数据库(mysql 5.7)，编程语言选择 python 和它的 web 框架 flask。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先是 apache 的配置，apache 负责接收和处理请求。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></div><div class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> nightmare.xin</div><div class="line">        <span class="attribute">WSGIScriptAlias</span> / /var/www/web/flaskapp.wsgi</div><div class="line">        <span class="section">&lt;Directory /var/www/web/app/&gt;</span></div><div class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</div><div class="line">            <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></div><div class="line">        <span class="section">&lt;/Directory&gt;</span></div><div class="line">        <span class="attribute">Alias</span> /static /var/www/web/app/static</div><div class="line">        <span class="section">&lt;Directory /var/www/web/app/static/&gt;</span></div><div class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</div><div class="line">            <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></div><div class="line">        <span class="section">&lt;/Directory&gt;</span></div><div class="line">        <span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</div><div class="line">        <span class="attribute">LogLevel</span> warn</div><div class="line">        <span class="attribute">CustomLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure></p><p>apache 接收请求后转发给 wsgi 处理，由 wsgi 传给应用程序，wsgi 是一套 apache, flask 都支持的标准，因此用作 web 服务器和应用程序之间的接口来简化后端设计。(首先载入 wsgi 模块，wsgi 的配置则基本不需要更改)(静态文件目录和错误/访问日志目录很重要)</p><p>该接口定义为如下 flaskapp.wsgi<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.insert(<span class="number">0</span>, <span class="string">"/var/www/web"</span>)</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line">application = app</div></pre></td></tr></table></figure></p><p>除了将网站根目录加入 path，该接口将 apache 请求处理转发到 app 对象(app 可以理解为一个 flask 应用程序对象)</p><p>该配置在 app/<strong>init</strong>.py 文件中，定义了如何处理请求的具体方法(建立路由表并编写处理代码)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, abort, redirect, url_for, send_from_directory</div><div class="line"><span class="comment">#from flask_bootstrap import Bootstrap</span></div><div class="line"><span class="comment">#from flask_moment import Moment</span></div><div class="line"><span class="comment">#from datetime import datetime</span></div><div class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"><span class="comment">#bootstrap = Bootstrap(app)</span></div><div class="line"><span class="comment">#moment = Moment(app)</span></div><div class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://web_python:web_python@localhost/web_python'</span></div><div class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">True</span></div><div class="line">db = SQLAlchemy(app)</div><div class="line">db.create_all()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/', methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">'Login/index.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/signin', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">()</span>:</span></div><div class="line">    username = request.form[<span class="string">'username'</span>]</div><div class="line">    password = request.form[<span class="string">'password'</span>]</div><div class="line">    <span class="keyword">if</span> User.query.filter_by(username=username, password=password).first() != <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> app.send_static_file(<span class="string">'Backstage/tables.html'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> app.send_static_file(<span class="string">'Login/index.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/signup', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">signup</span><span class="params">()</span>:</span></div><div class="line">    username = request.form[<span class="string">'username'</span>]</div><div class="line">    password = request.form[<span class="string">'password'</span>]</div><div class="line">    email = request.form[<span class="string">'email'</span>]</div><div class="line"></div><div class="line">    u = User(username=username, password=password, email=email)</div><div class="line">    db.session.add(u)</div><div class="line">    db.session.commit()</div><div class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">'Login/index.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'404.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p><p>其中用到了 Mysql 数据库，这里新建一个 web_python 的数据库，并新建一个名为 web_python 的用户，密码设置为 web_python，权限设置为允许任意ip登录，但只授权操作 web_python 数据库。</p><p><img src="http://store.nightmare.xin/37693cfc748049e45d87b8c7d8b9aacd.png" alt=""></p><p>sqlalchemy 模块提供了非常简便的方法使 flask 程序 mysql 交互<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">app = Flask(__name__)</div><div class="line">db = SQLAlchemy(app)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="keyword">True</span>)</div><div class="line">    password = db.Column(db.String(<span class="number">80</span>), unique=<span class="keyword">True</span>)</div><div class="line">    email = db.Column(db.String(<span class="number">80</span>), unique=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password,  email)</span>:</span></div><div class="line">        self.username = username</div><div class="line">        self.password = password</div><div class="line">        self.email = email</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % self.username</div></pre></td></tr></table></figure></p><p>以上代码将 python 类对象抽象为一个数据库，该类的变量作为字段名。</p><p>对数据库的操作被封装为以下函数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.create_all() 创建数据库和初始化</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.add</span>() 添加一条记录</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.update</span>() 更新</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.delete</span>() 删除</div><div class="line">db<span class="selector-class">.session</span><span class="selector-class">.commit</span>() 将修改提交到远程数据库</div><div class="line">... ...</div></pre></td></tr></table></figure></p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>中途服务器出现过几次问题，比如网页请求502呀，资源请求404呀，apache无法启动呀，无法定向到指定的url呀。 通过google和stackoverflow解决了，一个惨痛的教训是，一定记得看错误日志(在/var/log/下相应子目录)…</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对 web 知识了解又加深了一些</p>]]></content>
    
    <summary type="html">
    
      python + flask + apache + mysql 后台处理请求
    
    </summary>
    
      <category term="demo" scheme="https://blog.nightmare.xin/categories/demo/"/>
    
    
      <category term="demo" scheme="https://blog.nightmare.xin/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>Makefile 学习小记</title>
    <link href="https://blog.nightmare.xin/makefile.html"/>
    <id>https://blog.nightmare.xin/makefile.html</id>
    <published>2017-11-16T03:51:00.000Z</published>
    <updated>2017-11-21T12:49:36.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>参考文章：</p><ul><li><a href="https://seisman.github.io/how-to-write-makefile/overview.html" target="_blank" rel="external">跟我一起写 Makefile</a></li><li><a href="https://github.com/oxnz/clang-user-manual/wiki/Clang-%E4%B8%AD%E6%96%87%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C" target="_blank" rel="external">Clang 中文用户手册</a></li><li><a href="http://blog.sina.com.cn/s/blog_4de067e40102ds7d.html" target="_blank" rel="external">编译器 cc、gcc、g++、CC 的区别</a></li><li><a href="https://www.zhihu.com/question/39952667" target="_blank" rel="external">MinGW、MinGW-w64 与TDM-GCC 应该如何选择？</a></li><li><a href="http://blog.csdn.net/vlily/article/details/7247888" target="_blank" rel="external">C++ 函数系列篇：函数的默认值+带默认参数的函数</a></li><li><a href="http://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html" target="_blank" rel="external">g++ 参数介绍</a></li><li><a href="https://tonghuix.io/2012/04/cc%E7%9A%84%E9%80%9A%E7%94%A8makefile%E6%A8%A1%E6%9D%BF/" target="_blank" rel="external">C/C++ 的通用Makefile模板</a></li><li><a href="https://sourceforge.net/projects/gcmakefile/" target="_blank" rel="external">Generic Makefile for C/C++ Programs</a></li></ul><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>TODO list：</p><ul><li><del>自动从源文件寻找依赖</del></li><li><del>批量处理多个程序</del></li><li><del>一键清理</del></li><li>more…</li></ul><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>下边是我实现的 makefile 模板。</p><p><a href="https://github.com/kur0mi/tools/blob/master/Makefile/Makefile%20v1.0" target="_blank" rel="external">Makefile 模板 v1.0</a></p><p><a href="https://github.com/kur0mi/tools/blob/master/Makefile/Makefile%20v2.0" target="_blank" rel="external">Makefile 模板 v2.0</a></p>]]></content>
    
    <summary type="html">
    
      Makefile 关系到了整个工程的编译规则。一个工程中的源文件不计其数，并且按类型、功能、模块分别放在若干个目录中，makefile 定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="Demo" scheme="https://blog.nightmare.xin/tags/Demo/"/>
    
      <category term="Makefile" scheme="https://blog.nightmare.xin/tags/Makefile/"/>
    
      <category term="python" scheme="https://blog.nightmare.xin/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>南航计算机学院第六期科创</title>
    <link href="https://blog.nightmare.xin/rainbow.html"/>
    <id>https://blog.nightmare.xin/rainbow.html</id>
    <published>2017-11-09T10:40:25.000Z</published>
    <updated>2017-11-21T11:14:59.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>em… 科创成功结题了，总要写点什么</p><p>差不多是去年9,10月左右吧，那时候组队接下了这个题目，“基于sha256算法及并行编程语言的快速密码破解方法研究与实现”。 然后就开始填项目申报书，开题报告啥的，查各种资料，差不多今年一月左右审核结束，审核完了就正式开始了。 今年6月份有一次中期检查(也是我第一次上台答辩233)，那次比较水，去参加答辩的队伍都让通过了。 然后今年10月结题形式改成了成果展示，有学弟学妹学长学姐评委老师来围观。 然后今天下午结果公示，科创通过了…</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>那么，我们做的这个项目是个啥呢？</p><p>网络传输中密码如果用明文传输，或者数据库中密码用明文保存，那么只要能够获取到这部分数据就可以轻而易举的拿到密码。 这时采取的一种策略是进行hash加密，简单理解就是一种理论上不可逆的加密(无法从密文计算出明文)。 或者一些软件或文件被恶意修改之后放在网上，不经意下载安装就存在安全问题。 这时可以对软件/文件进行hash校验和，根据hash值是否相等来判断软件/文件是否被修改过。</p><p>而我们的项目就是破解hash算法家族的其中一种(sha256)(怎么越解释越像在做坏事…)</p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>破解过程类似暴力破解，借鉴一种时空折中算法(权衡时间和空间使其理论可行)，预先生成一张彩虹表，破解时进行查表获取明文。</p><p>彩虹表长什么样？</p><p>一条彩虹表有许多条彩虹链组成，一条彩虹链上有许多结点，一个结点对应一个明文/密文。 由于彩虹表数据量十分庞大(反正你买不起那么大的硬盘)，最后只选择存储每条链的第一个结点和最后一个结点(一般一个结点占8个字节(64bit))，需要时不是直接查表，而是先取出这些彩虹链将其展开，即用时间换取空间。</p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>说说科创中遇到的一些麻烦事吧。</p><p>科创申报的时候才大一，开始做的时候也才大一下，那时候要安装vs，还要安装cuda/opencl，安装过程磕磕碰碰，vs操作也不懂，各种error，查找路径，动/静态链接，硬件，cpu，gpu，指令，内存，线程，进程，并行，冲突，碰撞，锁，线程交互什么的一点概念都没有，这个项目要做什么怎么做也啥都不知道，当时还不会谷歌，百度搜来搜去就那点基础的东西。 很烦就是了，不过回忆起来，很多概念也是那时候开始建立的，也算是”不是那么糟糕的事情”了。</p><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>那时候就记得是要做并行，整个项目主要就是要提升计算速度，通过大规模并行来提升速度。 再进行优化什么的进一步提高。</p><p>并行就是多个指令一起运行，那JAVA不是就有多线程么，C语言也有多线程，想要的话fork一个就可以了。 这些多线程实质上仍是由一个CPU驱动的，其”并行”只是CPU对多个线程的切换。 就算它们可以驱动多核CPU或GPU进行真正的并行，，，，，效果也绝对没有我们那么好。</p><p>CUDA/OPENCL是什么呢？</p><p>首先，由很多硬件厂商共同制定了一个标准(参照ASCII)，大家都遵循这个标准，然后不同的厂商设计的硬件(cpu/gpu)就会支持这个标准，也会有不同的拓展。 CUDA/OPENCL就是提供了一套接口(参照shell)，使我们可以用高级语言直接去操纵底层CPU/GPU，即操控硬件实现真正的并行，根据CPU/GPU的结构和各个参数，辅以不断地测试，进行各种优化，达到最大化利用计算资源的目的(都这样了速度能不快吗)</p><h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p>于是当时懵逼的我们，用着懵逼的vs，使用懵逼的CUDA/OPENCL语言，去写一些什么都不懂的东西(年少不懂事)…</p><p>现在回想起来还是很感叹，计算机世界就像宇宙无穷无尽，那时候的我就像是硬生生的挖开了一个洞，洞越来越大，也就越会发现自己的不足。 <a href="http://www.freebuf.com/articles/others-articles/68711.html" target="_blank" rel="external">推荐阅读: 程序员学习之路</a></p><h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>这篇文章全是我自己写的，写完还是很满意的(骄傲.jpg)… 就把它归到新分类[Chain]里边吧。</p><p>ps: 我感冒应该是好了的，然而今天测了1000米跑，跑完又感冒了，就不该脱衣服…</p>]]></content>
    
    <summary type="html">
    
      结题了, .. .. .. yea
    
    </summary>
    
      <category term="Chain" scheme="https://blog.nightmare.xin/categories/Chain/"/>
    
    
      <category term="科创" scheme="https://blog.nightmare.xin/tags/%E7%A7%91%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>插入排序 学习小记</title>
    <link href="https://blog.nightmare.xin/insert.html"/>
    <id>https://blog.nightmare.xin/insert.html</id>
    <published>2017-11-08T09:24:26.000Z</published>
    <updated>2017-11-08T09:48:19.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easy-version"><a href="#easy-version" class="headerlink" title="easy version"></a>easy version</h1><p>一种简单的想法…</p><p>一开始只有一个字符，认为它是有序的； 后来出现了第二个字符，寻找恰当的位置插入，这时它们又变得有序了；</p><p>然后出现了第三个字符，寻找恰当的位置插入，它们还是有序的； 然后第四个…</p><p>C语言代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inserch_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> k = i + <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> temp = a[k];</div><div class="line"><span class="keyword">while</span> (temp &lt; a[k - <span class="number">1</span>] &amp;&amp; k &gt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">a[k] = a[k - <span class="number">1</span>];</div><div class="line">k--;</div><div class="line">&#125;</div><div class="line">a[k] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="hard-version"><a href="#hard-version" class="headerlink" title="hard version"></a>hard version</h1><p>基于一种递归思想，现在要对n个数据排序，那么只需要先将前n-1个数据排序，再将最后一个元素插入；</p><p>然后知道递归到最后只需对一个元素排序。</p><p>函数大概会长这样：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void <span class="function"><span class="title">fun</span><span class="params">(int a[], int n)</span></span>    <span class="comment">//对前n个数据排序</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>):</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line"></div><div class="line">    b = <span class="function"><span class="title">fun</span><span class="params">(a, n<span class="number">-1</span>)</span></span>;</div><div class="line">    <span class="comment">//将最后一个元素插入b中</span></div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>嗯，差不多就这样</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最近网安比赛比较多，打算停一段时间开始补补作业了，毕竟还没做好挂科的准备。</p><p>ps: 感冒可以说马上就要好了么… 倒是快好啊</p>]]></content>
    
    <summary type="html">
    
      插入排序认为一部分字符总是有序的，并且在插入新的字符后仍然保持有序。
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="排序" scheme="https://blog.nightmare.xin/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://blog.nightmare.xin/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://blog.nightmare.xin/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>今天的云很好看啊</title>
    <link href="https://blog.nightmare.xin/start.html"/>
    <id>https://blog.nightmare.xin/start.html</id>
    <published>2017-11-06T14:11:43.000Z</published>
    <updated>2018-03-16T13:04:25.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="day-0x00"><a href="#day-0x00" class="headerlink" title="day_0x00"></a>day_0x00</h2><p>面对未来和未知的担忧和恐慌，在今天快要结束时终于消失的无影无踪。</p>]]></content>
    
    <summary type="html">
    
      随便记点什么吧，想到哪写到哪233
    
    </summary>
    
      <category term="Life" scheme="https://blog.nightmare.xin/categories/Life/"/>
    
    
      <category term="DIARY" scheme="https://blog.nightmare.xin/tags/DIARY/"/>
    
  </entry>
  
  <entry>
    <title>今天的云很好看啊</title>
    <link href="https://blog.nightmare.xin/cloud.html"/>
    <id>https://blog.nightmare.xin/cloud.html</id>
    <published>2017-11-06T14:11:43.000Z</published>
    <updated>2018-03-16T13:01:05.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>忘了从0开始计数了，特意返回来补上…</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>em.. 感冒已经很轻了，应该是要好了，终于可以免受这种痛苦了，算是这段时间的一个好消息。 再休息几天吧，暂停了一周的跑步计划也该重新开始了(又想到1000米跑逐步临近，有点迫不及待的想检测一下这段时间的成果呢)。 话说，我为什么总会感冒呢..</p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>近期的CTF比赛有上海的比赛和浙警的比赛，上海的网安大赛太难了，勉强做了一道100分的sql注入就跑路了，学长们很厉害，用我们的账号打到前几名。</p><p>浙警的比赛今天刚刚开始，分三周三次小比赛，听学长说题目对萌新比较友好，怀着激动的心情去玩了玩，几分郁闷，几分开心。</p><p><img src="http://store.nightmare.xin/0593ceb4c528a20a4daf1f70f0c70ebf.png" alt=""></p><p>就我自己的感觉吧，没有特别水的题，题目难度基本分为<strong>突然就做出来了</strong>和<strong>做到死也做不出来</strong>两种。</p><p>应该是很多大表哥对这种小比赛不感兴趣，侥幸混个no.10。</p><p><img src="http://store.nightmare.xin/28b1895a15ed5e7d4e8fc83bbfb15495.png" alt=""></p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>数据结构讲到了tree(树)了，今天认真听了一下，感觉老师讲的还是很好的，讲的很详细听的也有意思，以前为什么不想听呢，其实以前内心是有点反感的，大部分人都没有什么编程能力就去讲数据结构算法什么的，数据结构是算法的基础，算法是程序的灵魂嘛，但是这些要建立在代码熟练的基础上，嗯em.. 反感的最初来源应该是编程速成班，快速培训或校园招聘什么的，不理解那些人的心态，完全就是抱着”试试看，或许我成功了呢”，或者”我周围人都那么做，我那么做也没什么嘛”的心态？ 一边渴望得到认可，一边又沉醉在”周围人都和我一样”的心态中，或许是我性格比较孤僻的原因么</p><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>谈到性格改变什么的，在大二认识的伙伴们可能会觉得我平时在一起时不太爱讲话，其实比起大一已经好多了，大一认识的伙伴们应该有体会，一年我还是学到了些什么有很大改变的，提到了大一就不得不提起高中和初中了，初中被欺负，高中没住校，六年与人交流可以说是非常少之又少了… 刚进大学也只想混日子混过去的，至于为什么突然转变，这就不得不说提起我的大姐姐了，由于在博客中又是不太好提的就不提了… (想知道的直接问我嘛，又不是不能说(骄傲.jpg))</p><h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p>嘛，现在社会还是太浮躁了</p><h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>我的小窝还是装的很不错了，改天再买个放东西的架子什么的，对了，我的二次元枕套也要买</p><h1 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h1><p>哇，都0x07了，再写点什么呢</p><h1 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h1><p>人生有很多选择，有些很重要，但更重要的是选择之后坚持走下去。</p><h1 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h1><p>其实我特别想知道都有谁看过我的博客，想写个签到评论什么的功能，但是，本菜鸡懒啊…</p><h1 id="0x0a"><a href="#0x0a" class="headerlink" title="0x0a"></a>0x0a</h1><p>乒乓球握拍姿势感觉越来越奇怪，很别扭，难受</p><p>上次打赢了了一个小姐姐还不服气(哼~)</p><h1 id="0x0b"><a href="#0x0b" class="headerlink" title="0x0b"></a>0x0b</h1><p>到这里结束了，为什么呢，因为马上要熄灯断网了</p>]]></content>
    
    <summary type="html">
    
      随便记点什么吧，想到哪写到哪233
    
    </summary>
    
      <category term="Life" scheme="https://blog.nightmare.xin/categories/Life/"/>
    
    
      <category term="DIARY" scheme="https://blog.nightmare.xin/tags/DIARY/"/>
    
  </entry>
  
  <entry>
    <title>Kurumi</title>
    <link href="https://blog.nightmare.xin/kurumi.html"/>
    <id>https://blog.nightmare.xin/kurumi.html</id>
    <published>2017-11-03T13:59:13.000Z</published>
    <updated>2017-11-03T15:04:03.868Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，给大家介绍一下，<strong>Tokisaki Kurumi</strong> (时崎狂三)，精灵识别名为 <strong>nightmare</strong> (梦魇)，出自作品 <strong>date a live</strong>，这是一个充满矛盾的角色，优雅而疯狂，理解而理智，善良而妩媚，坚强而孤独，神秘而悲伤</p><p><img src="http://store.nightmare.xin/6364d3f0f495b6ab9dcf8d3b5c6e0b01.jpg" alt=""></p><p>作为卡巴拉生命之树中的第3质点Binah(译作理解)。数字是3、颜色是黑色、宝石是珍珠、金属是铅、惑星以土星为象征。被称为至高的母、象征女性原理。代表成熟的女性。神名是Elohim。守护天使是Zaphkiel。</p><p><img src="http://store.nightmare.xin/109a859d777f350ee27e322df2738ec5.png" alt=""></p><p>时钟之眼，崎岖之路，狂我之心，三噩之梦。</p><p>时无诳语，崎如逝行，狂而柔软，三逆轮回。</p><p>时光倒流，崎路尽头，狂而病娇，三推不倒。</p><p>时如流水，崎如清沙，狂岭飞虹，三峻樽花。</p><p>时光停转，崎路何安，狂梦唯叹，三生有伴。</p><p>时逝云烟散，崎路夜雨寒，狂风烛影乱，三尺流年<br>叹。</p><p>时夜魇梦舞，崎路魂断河，狂风追留逝，三情思暮道。</p><p>时湮轮回换，崎岖流年染，狂风卷衣衫，三笑颜不变。</p><p>时光之沉淀，崎途之惘然，狂乱的青春，三世的轮回。</p><p>时桥偶乐遇，崎转遗石板，狂思难忘美，三遇还素琴。</p><p>时如流觞曲水，崎如镜花水月，狂歌晓风残月，三觅千里千寻。</p><p>时光荏苒逝如斯，崎岖之路夜寒蝉，狂心不泯终有时，三千弱水渡未迟。</p><p>时幕天钟转轮回，崎曲泪离血染飞。狂焉病笑笑尘罪，三生只为一人归。</p>]]></content>
    
    <summary type="html">
    
      游荡于黑暗与光明之间， 亦正亦邪的精灵
    
    </summary>
    
      <category term="无悔二次元" scheme="https://blog.nightmare.xin/categories/%E6%97%A0%E6%82%94%E4%BA%8C%E6%AC%A1%E5%85%83/"/>
    
    
      <category term="date a live" scheme="https://blog.nightmare.xin/tags/date-a-live/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法 学习小记</title>
    <link href="https://blog.nightmare.xin/kmp.html"/>
    <id>https://blog.nightmare.xin/kmp.html</id>
    <published>2017-11-02T03:35:58.000Z</published>
    <updated>2017-11-02T05:00:35.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>参考文章<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">字符串匹配的KMP算法</a></p><h2 id="简易的匹配算法"><a href="#简易的匹配算法" class="headerlink" title="简易的匹配算法"></a>简易的匹配算法</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">对于字符串匹配，一种显而易见的想法是</div><div class="line">[<span class="symbol">B</span>]<span class="symbol">ABABCABCD</span></div><div class="line">[<span class="symbol">A</span>]<span class="symbol">BC</span></div><div class="line"></div><div class="line"><span class="symbol">B</span>[<span class="symbol">A</span>]<span class="symbol">BABCABCD</span></div><div class="line"> [<span class="symbol">A</span>]<span class="symbol">BC</span></div><div class="line"></div><div class="line">开始尝试匹配下一位</div><div class="line"><span class="symbol">BA</span>[<span class="symbol">B</span>]<span class="symbol">ABCABCD</span></div><div class="line"> <span class="symbol">A</span>[<span class="symbol">B</span>]<span class="symbol">C</span></div><div class="line"></div><div class="line"><span class="symbol">BAB</span>[<span class="symbol">A</span>]<span class="symbol">BCABCD</span></div><div class="line"> <span class="symbol">AB</span>[<span class="symbol">C</span>]</div><div class="line"></div><div class="line">当检测到<span class="symbol">A</span>,<span class="symbol">C</span>不匹配</div><div class="line">则退回到主串匹配开始的下一位重新匹配</div><div class="line"><span class="symbol">BA</span>[<span class="symbol">B</span>]<span class="symbol">ABCABCD</span></div><div class="line">  [<span class="symbol">A</span>]<span class="symbol">BC</span></div><div class="line"></div><div class="line">这一过程称为<span class="string">'回溯'</span></div><div class="line">显然因为大量的回溯使得在最坏情况下时间复杂度达到了<span class="symbol">O</span>(n*m)</div></pre></td></tr></table></figure><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">对于形如下的匹配</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">    <span class="symbol">ABCDAB</span>[<span class="symbol">D</span>]</div><div class="line"></div><div class="line">基于一种事实，即我们已经知道已经成功匹配的部分是 <span class="symbol">ABCDAB</span>，那么在</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">        <span class="symbol">AB</span>[<span class="symbol">C</span>]<span class="symbol">DABD</span></div><div class="line"></div><div class="line">之前的部分都是冗余的，<span class="symbol">KMP</span>算法通过对子串的特殊处理直接跳转到这一步，避免了回溯。</div><div class="line">构建一张表如下</div><div class="line"><span class="symbol">ABCDABD</span></div><div class="line"><span class="number">0000120</span></div><div class="line"></div><div class="line">其中<span class="symbol">A</span>=<span class="number">1</span>代表若字符<span class="string">'A'</span>已经匹配，则新的匹配可以从子串中序号为<span class="number">1</span>的字符<span class="string">'B'</span>(从<span class="number">0</span>开始计数)重新开始。</div><div class="line"><span class="symbol">B</span>=<span class="number">2</span>则表示由于<span class="string">'AB'</span>已经匹配，子串开头的<span class="string">'AB'</span>就不用再额外匹配了，即从<span class="string">'C'</span>开始匹配。</div><div class="line"></div><div class="line">对于这张表的使用解读如下</div><div class="line">当匹配到</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">    <span class="symbol">ABCDAB</span>[<span class="symbol">D</span>]</div><div class="line"></div><div class="line">因为前一个字符<span class="symbol">B</span>=<span class="number">2</span>，则可以直接跳转到</div><div class="line"><span class="symbol">BBC</span> <span class="symbol">ABCDAB</span>[ ]<span class="symbol">ABCDABCDABDE</span></div><div class="line">        <span class="symbol">AB</span>[<span class="symbol">C</span>]<span class="symbol">DABD</span></div></pre></td></tr></table></figure><h2 id="‘表’的计算"><a href="#‘表’的计算" class="headerlink" title="‘表’的计算"></a>‘表’的计算</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">以<span class="string">'ABCD[A]BD'</span>中的<span class="string">'A'</span>为例</div><div class="line"></div><div class="line">取出<span class="string">'ABCDA'</span></div><div class="line">计算前缀字符串[<span class="string">'A'</span>, <span class="string">'AB'</span>, <span class="string">'ABC'</span>, <span class="string">'ABCD'</span>]</div><div class="line">计算后缀字符串[<span class="string">'BCDA'</span>, <span class="string">'CDA'</span>, <span class="string">'DA'</span>, <span class="string">'A'</span>]</div><div class="line">找出其中相同的字符串<span class="string">'A'</span></div><div class="line">该字符串的长度为<span class="number">1</span></div><div class="line">若结果有多个，取长度最大的</div></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>不想慢慢造轮子，就用python写了，能体现算法就好Orz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">s = <span class="string">'BBC ABCDAB ABCDABCDABDE'</span></div><div class="line">t = <span class="string">'ABCDABD'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPat</span><span class="params">(s)</span>:</span></div><div class="line">    r1 = [s[:i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>)]</div><div class="line">    r2 = [s[i+<span class="number">1</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>)]</div><div class="line">    <span class="keyword">return</span> max([len(x) <span class="keyword">for</span> x <span class="keyword">in</span> r1 <span class="keyword">if</span> x <span class="keyword">in</span> r2] + [<span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetAllPat</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> [GetPat(s[:i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(s, t)</span>:</span></div><div class="line">    pat = GetAllPat(t)</div><div class="line">    <span class="comment">#print pat</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    j = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; len(s):</div><div class="line">        <span class="keyword">while</span> i &lt; len(s) <span class="keyword">and</span> j &lt; len(t):</div><div class="line">            <span class="keyword">if</span> s[i] == t[j]:</div><div class="line">                i += <span class="number">1</span></div><div class="line">                j += <span class="number">1</span></div><div class="line">                <span class="keyword">print</span> i, j</div><div class="line">            <span class="keyword">elif</span> j == <span class="number">0</span>:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                j = pat[j<span class="number">-1</span>]</div><div class="line">                </div><div class="line">        <span class="keyword">if</span> i == len(s):</div><div class="line">            <span class="keyword">print</span> <span class="string">'traverse end.'</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            j = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main(s, t)</div></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>ps: 感冒貌似快好了(一感冒真的除了躺着什么都不想做…)</p>]]></content>
    
    <summary type="html">
    
      KMP是一种字符串匹配算法，通过对模式字符串的处理，可以达到O(n+m)的时间复杂度
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="KMP" scheme="https://blog.nightmare.xin/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>pyqt 学习小记(一)</title>
    <link href="https://blog.nightmare.xin/pyqt.html"/>
    <id>https://blog.nightmare.xin/pyqt.html</id>
    <published>2017-10-31T12:46:06.000Z</published>
    <updated>2017-11-21T12:53:40.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先google找教程</p><p>参考<a href="http://pyqt.sourceforge.net/Docs/PyQt5/" target="_blank" rel="external">sourceforge上的一个英文文档</a>和<a href="http://code.py40.com/pyqt5/" target="_blank" rel="external">中文教程</a></p><p>使用pip安装<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> -m pip install <span class="keyword">python</span>-qt5</div></pre></td></tr></table></figure></p><p>ps: 因为我的pip出了一些问题所以前边加python -m</p><p>尝试后发现下载速度太慢而且网络连接会中断，不能忍，直接去官网找压缩包，结果在官网下载到一个gpl的包… what’s fxxk，这是啥</p><p>顿时觉得pyqt的安装不是那么顺利了，翻到一篇文章<a href="https://zhuanlan.zhihu.com/p/25561911" target="_blank" rel="external">python2+pyqt5安装</a>，这么复杂，还要自己编译，可能是pyqt5太新了，我也不是那么强迫症的人，试试其他的。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> -m pip install <span class="keyword">python</span>-qt</div></pre></td></tr></table></figure><p>秒成功</p><p>但是打开 <strong>F:\Runtime\Python\Python27\Lib\site-packages\Qt</strong> 一看就一个<strong>init</strong>.py文件…</p><p>pip下载太慢，gpl包又懒得编译，直接去sourceforge下载exe，<a href="https://sourceforge.net/projects/pyqt/?source=typ_redirect" target="_blank" rel="external">地址</a>，下载完安装时发现时python3.5的…</p><p>不吐槽了，一番艰辛后找到了<a href="https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/" target="_blank" rel="external">下载地址</a>，为什么选pyqt4呢.. 当然是因为找不到python2的pyqt5安装程序。</p><p>一路next，修改为自己的python安装路径，一切OK。</p><h1 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h1><p>打开文件夹 <strong>F:\Runtime\Python\Python27\Lib\site-packages\PyQt4</strong> ，和自己的pyqt打声招呼吧。看到一堆包和模块，菜鸡先不管这些..</p><p>开始写一个小程序，参考<a href="http://www.qaulau.com/books/PyQt4_Tutorial/" target="_blank" rel="external">文章</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">from PyQt4 import QtGui</div><div class="line"></div><div class="line">app = QtGui.QApplication(sys.argv)</div><div class="line"></div><div class="line">widget = QtGui.QWidget()</div><div class="line">widget.resize(<span class="number">250</span>, <span class="number">150</span>)</div><div class="line">widget.setWindowTitle(<span class="string">'simple'</span>)</div><div class="line">widget.show()</div><div class="line"></div><div class="line">sys.<span class="keyword">exit</span>(app.exec_())</div></pre></td></tr></table></figure><p>成功显示一个窗口</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>打算着每学习一个新知识点都写点demo什么的，有时间把大一上写的C语言贪吃蛇，大一下写的中国象棋搬过来233</p><p>感冒貌似又重了，明天英语还有presentation，有时间再做吧，(事情总是一推再推~)，无奈.jpg</p><p>ps: 寒流来袭，小心感冒…</p>]]></content>
    
    <summary type="html">
    
      day1 pyqt的安装. 这是一篇吐槽文
    
    </summary>
    
      <category term="Demo" scheme="https://blog.nightmare.xin/categories/Demo/"/>
    
    
      <category term="python" scheme="https://blog.nightmare.xin/tags/python/"/>
    
      <category term="pyqt" scheme="https://blog.nightmare.xin/tags/pyqt/"/>
    
  </entry>
  
</feed>
